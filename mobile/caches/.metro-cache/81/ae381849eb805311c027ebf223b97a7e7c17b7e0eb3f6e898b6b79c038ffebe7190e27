{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":53,"index":53}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/DeviceEventEmitter","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"oyzjoDTnmzvralkBUpVLTrRSEl0=","exportNames":["*"]}},{"name":"./Audio/RecordingConstants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":105},"end":{"line":3,"column":69,"index":174}}],"key":"PLZx+w+meD0mX+Vfg7jl8Oy4mG0=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _DeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[2], \"react-native-web/dist/exports/DeviceEventEmitter\"));\n  var _RecordingConstants = require(_dependencyMap[3], \"./Audio/RecordingConstants\");\n  async function getPermissionWithQueryAsync(name) {\n    if (!navigator || !navigator.permissions || !navigator.permissions.query) return null;\n    try {\n      const {\n        state\n      } = await navigator.permissions.query({\n        name\n      });\n      switch (state) {\n        case 'granted':\n          return _expoModulesCore.PermissionStatus.GRANTED;\n        case 'denied':\n          return _expoModulesCore.PermissionStatus.DENIED;\n        default:\n          return _expoModulesCore.PermissionStatus.UNDETERMINED;\n      }\n    } catch {\n      // Firefox - TypeError: 'microphone' (value of 'name' member of PermissionDescriptor) is not a valid value for enumeration PermissionName.\n      return _expoModulesCore.PermissionStatus.UNDETERMINED;\n    }\n  }\n  function getUserMedia(constraints) {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      return navigator.mediaDevices.getUserMedia(constraints);\n    }\n    // Some browsers partially implement mediaDevices. We can't just assign an object\n    // with getUserMedia as it would overwrite existing properties.\n    // Here, we will just add the getUserMedia property if it's missing.\n    // First get ahold of the legacy getUserMedia, if present\n    const getUserMedia =\n    // TODO: this method is deprecated, migrate to https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || function () {\n      const error = new Error('Permission unimplemented');\n      error.code = 0;\n      error.name = 'NotAllowedError';\n      throw error;\n    };\n    return new Promise((resolve, reject) => {\n      // TODO(@kitten): The types indicates that this is incorrect.\n      // Please check whether this is correct!\n      // @ts-expect-error: The `successCallback` doesn't match a `resolve` function\n      getUserMedia.call(navigator, constraints, resolve, reject);\n    });\n  }\n  function getStatusFromMedia(media) {\n    if (!media) {\n      return {\n        isLoaded: false,\n        error: undefined\n      };\n    }\n    const isPlaying = !!(media.currentTime > 0 && !media.paused && !media.ended && media.readyState > 2);\n    const status = {\n      isLoaded: true,\n      uri: media.src,\n      progressUpdateIntervalMillis: 100,\n      //TODO: Bacon: Add interval between calls\n      durationMillis: media.duration * 1000,\n      positionMillis: media.currentTime * 1000,\n      // playableDurationMillis: media.buffered * 1000,\n      // seekMillisToleranceBefore?: number\n      // seekMillisToleranceAfter?: number\n      shouldPlay: media.autoplay,\n      isPlaying,\n      isBuffering: false,\n      //media.waiting,\n      rate: media.playbackRate,\n      // TODO: Bacon: This seems too complicated right now: https://webaudio.github.io/web-audio-api/#dom-biquadfilternode-frequency\n      shouldCorrectPitch: false,\n      volume: media.volume,\n      audioPan: 0,\n      isMuted: media.muted,\n      isLooping: media.loop,\n      didJustFinish: media.ended\n    };\n    return status;\n  }\n  async function setStatusForMedia(media, status) {\n    if (status.positionMillis !== undefined) {\n      media.currentTime = status.positionMillis / 1000;\n    }\n    // if (status.progressUpdateIntervalMillis !== undefined) {\n    //   media.progressUpdateIntervalMillis = status.progressUpdateIntervalMillis;\n    // }\n    // if (status.seekMillisToleranceBefore !== undefined) {\n    //   media.seekMillisToleranceBefore = status.seekMillisToleranceBefore;\n    // }\n    // if (status.seekMillisToleranceAfter !== undefined) {\n    //   media.seekMillisToleranceAfter = status.seekMillisToleranceAfter;\n    // }\n    // if (status.shouldCorrectPitch !== undefined) {\n    //   media.shouldCorrectPitch = status.shouldCorrectPitch;\n    // }\n    if (status.shouldPlay !== undefined) {\n      if (status.shouldPlay) {\n        await media.play();\n      } else {\n        await media.pause();\n      }\n    }\n    if (status.rate !== undefined) {\n      media.playbackRate = status.rate;\n    }\n    if (status.shouldCorrectPitch !== undefined) {\n      media.preservesPitch = status.shouldCorrectPitch;\n    }\n    if (status.volume !== undefined) {\n      media.volume = status.volume;\n    }\n    if (status.isMuted !== undefined) {\n      media.muted = status.isMuted;\n    }\n    if (status.isLooping !== undefined) {\n      media.loop = status.isLooping;\n    }\n    return getStatusFromMedia(media);\n  }\n  let mediaRecorder = null;\n  let mediaRecorderUptimeOfLastStartResume = 0;\n  let mediaRecorderDurationAlreadyRecorded = 0;\n  let mediaRecorderIsRecording = false;\n  function getAudioRecorderDurationMillis() {\n    let duration = mediaRecorderDurationAlreadyRecorded;\n    if (mediaRecorderIsRecording && mediaRecorderUptimeOfLastStartResume > 0) {\n      duration += Date.now() - mediaRecorderUptimeOfLastStartResume;\n    }\n    return duration;\n  }\n  var _default = exports.default = {\n    async getStatusForVideo(element) {\n      return getStatusFromMedia(element);\n    },\n    async loadForVideo(element, nativeSource, fullInitialStatus) {\n      return getStatusFromMedia(element);\n    },\n    async unloadForVideo(element) {\n      return getStatusFromMedia(element);\n    },\n    async setStatusForVideo(element, status) {\n      return setStatusForMedia(element, status);\n    },\n    async replayVideo(element, status) {\n      return setStatusForMedia(element, status);\n    },\n    /* Audio */\n    async setAudioMode() {},\n    async setAudioIsEnabled() {},\n    async getStatusForSound(element) {\n      return getStatusFromMedia(element);\n    },\n    async loadForSound(nativeSource, fullInitialStatus) {\n      const source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n      const media = new Audio(source);\n      media.ontimeupdate = () => {\n        _DeviceEventEmitter.default.emit('didUpdatePlaybackStatus', {\n          key: media,\n          status: getStatusFromMedia(media)\n        });\n      };\n      media.onerror = () => {\n        _DeviceEventEmitter.default.emit('ExponentAV.onError', {\n          key: media,\n          error: media.error.message\n        });\n      };\n      const status = await setStatusForMedia(media, fullInitialStatus);\n      return [media, status];\n    },\n    async unloadForSound(element) {\n      element.pause();\n      element.removeAttribute('src');\n      element.load();\n      return getStatusFromMedia(element);\n    },\n    async setStatusForSound(element, status) {\n      return setStatusForMedia(element, status);\n    },\n    async replaySound(element, status) {\n      return setStatusForMedia(element, status);\n    },\n    /* Recording */\n    //   async setUnloadedCallbackForAndroidRecording() {},\n    async getAudioRecordingStatus() {\n      return {\n        canRecord: mediaRecorder?.state === 'recording' || mediaRecorder?.state === 'inactive',\n        isRecording: mediaRecorder?.state === 'recording',\n        isDoneRecording: false,\n        durationMillis: getAudioRecorderDurationMillis(),\n        uri: null\n      };\n    },\n    // TODO(@kitten): Needs to be typed\n    async prepareAudioRecorder(options) {\n      if (typeof navigator !== 'undefined' && !navigator.mediaDevices) {\n        throw new Error('No media devices available');\n      }\n      mediaRecorderUptimeOfLastStartResume = 0;\n      mediaRecorderDurationAlreadyRecorded = 0;\n      const stream = await getUserMedia({\n        audio: true\n      });\n      mediaRecorder = new window.MediaRecorder(stream, options?.web || _RecordingConstants.RecordingOptionsPresets.HIGH_QUALITY.web);\n      mediaRecorder.addEventListener('pause', () => {\n        mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n        mediaRecorderIsRecording = false;\n      });\n      mediaRecorder.addEventListener('resume', () => {\n        mediaRecorderUptimeOfLastStartResume = Date.now();\n        mediaRecorderIsRecording = true;\n      });\n      mediaRecorder.addEventListener('start', () => {\n        mediaRecorderUptimeOfLastStartResume = Date.now();\n        mediaRecorderDurationAlreadyRecorded = 0;\n        mediaRecorderIsRecording = true;\n      });\n      mediaRecorder.addEventListener('stop', () => {\n        mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n        mediaRecorderIsRecording = false;\n        // Clears recording icon in Chrome tab\n        stream.getTracks().forEach(track => track.stop());\n      });\n      const {\n        uri,\n        ...status\n      } = await this.getAudioRecordingStatus();\n      return {\n        uri: null,\n        status\n      };\n    },\n    async startAudioRecording() {\n      if (mediaRecorder === null) {\n        throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n      }\n      if (mediaRecorder.state === 'paused') {\n        mediaRecorder.resume();\n      } else {\n        mediaRecorder.start();\n      }\n      return this.getAudioRecordingStatus();\n    },\n    async pauseAudioRecording() {\n      if (mediaRecorder === null) {\n        throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n      }\n      // Set status to paused\n      mediaRecorder.pause();\n      return this.getAudioRecordingStatus();\n    },\n    async stopAudioRecording() {\n      const _mediaRecorder = mediaRecorder;\n      if (_mediaRecorder === null) {\n        throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n      }\n      if (_mediaRecorder.state === 'inactive') {\n        return this.getAudioRecordingStatus();\n      }\n      const dataPromise = new Promise(resolve => _mediaRecorder.addEventListener('dataavailable', e => resolve(e.data)));\n      _mediaRecorder.stop();\n      const data = await dataPromise;\n      const url = URL.createObjectURL(data);\n      return {\n        ...(await this.getAudioRecordingStatus()),\n        uri: url\n      };\n    },\n    async unloadAudioRecorder() {\n      mediaRecorder = null;\n    },\n    async getPermissionsAsync() {\n      const maybeStatus = await getPermissionWithQueryAsync('microphone');\n      switch (maybeStatus) {\n        case _expoModulesCore.PermissionStatus.GRANTED:\n          return {\n            status: _expoModulesCore.PermissionStatus.GRANTED,\n            expires: 'never',\n            canAskAgain: true,\n            granted: true\n          };\n        case _expoModulesCore.PermissionStatus.DENIED:\n          return {\n            status: _expoModulesCore.PermissionStatus.DENIED,\n            expires: 'never',\n            canAskAgain: true,\n            granted: false\n          };\n        default:\n          return await this.requestPermissionsAsync();\n      }\n    },\n    async requestPermissionsAsync() {\n      try {\n        const stream = await getUserMedia({\n          audio: true\n        });\n        stream.getTracks().forEach(track => track.stop());\n        return {\n          status: _expoModulesCore.PermissionStatus.GRANTED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: true\n        };\n      } catch {\n        return {\n          status: _expoModulesCore.PermissionStatus.DENIED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: false\n        };\n      }\n    }\n  };\n});","lineCount":322,"map":[[7,2,1,0],[7,6,1,0,"_expoModulesCore"],[7,22,1,0],[7,25,1,0,"require"],[7,32,1,0],[7,33,1,0,"_dependencyMap"],[7,47,1,0],[8,2,1,53],[8,6,1,53,"_DeviceEventEmitter"],[8,25,1,53],[8,28,1,53,"_interopRequireDefault"],[8,50,1,53],[8,51,1,53,"require"],[8,58,1,53],[8,59,1,53,"_dependencyMap"],[8,73,1,53],[9,2,3,0],[9,6,3,0,"_RecordingConstants"],[9,25,3,0],[9,28,3,0,"require"],[9,35,3,0],[9,36,3,0,"_dependencyMap"],[9,50,3,0],[10,2,4,0],[10,17,4,15,"getPermissionWithQueryAsync"],[10,44,4,42,"getPermissionWithQueryAsync"],[10,45,4,43,"name"],[10,49,4,47],[10,51,4,49],[11,4,5,4],[11,8,5,8],[11,9,5,9,"navigator"],[11,18,5,18],[11,22,5,22],[11,23,5,23,"navigator"],[11,32,5,32],[11,33,5,33,"permissions"],[11,44,5,44],[11,48,5,48],[11,49,5,49,"navigator"],[11,58,5,58],[11,59,5,59,"permissions"],[11,70,5,70],[11,71,5,71,"query"],[11,76,5,76],[11,78,6,8],[11,85,6,15],[11,89,6,19],[12,4,7,4],[12,8,7,8],[13,6,8,8],[13,12,8,14],[14,8,8,16,"state"],[15,6,8,22],[15,7,8,23],[15,10,8,26],[15,16,8,32,"navigator"],[15,25,8,41],[15,26,8,42,"permissions"],[15,37,8,53],[15,38,8,54,"query"],[15,43,8,59],[15,44,8,60],[16,8,8,62,"name"],[17,6,8,67],[17,7,8,68],[17,8,8,69],[18,6,9,8],[18,14,9,16,"state"],[18,19,9,21],[19,8,10,12],[19,13,10,17],[19,22,10,26],[20,10,11,16],[20,17,11,23,"PermissionStatus"],[20,50,11,39],[20,51,11,40,"GRANTED"],[20,58,11,47],[21,8,12,12],[21,13,12,17],[21,21,12,25],[22,10,13,16],[22,17,13,23,"PermissionStatus"],[22,50,13,39],[22,51,13,40,"DENIED"],[22,57,13,46],[23,8,14,12],[24,10,15,16],[24,17,15,23,"PermissionStatus"],[24,50,15,39],[24,51,15,40,"UNDETERMINED"],[24,63,15,52],[25,6,16,8],[26,4,17,4],[26,5,17,5],[26,6,18,4],[26,12,18,10],[27,6,19,8],[28,6,20,8],[28,13,20,15,"PermissionStatus"],[28,46,20,31],[28,47,20,32,"UNDETERMINED"],[28,59,20,44],[29,4,21,4],[30,2,22,0],[31,2,23,0],[31,11,23,9,"getUserMedia"],[31,23,23,21,"getUserMedia"],[31,24,23,22,"constraints"],[31,35,23,33],[31,37,23,35],[32,4,24,4],[32,8,24,8,"navigator"],[32,17,24,17],[32,18,24,18,"mediaDevices"],[32,30,24,30],[32,34,24,34,"navigator"],[32,43,24,43],[32,44,24,44,"mediaDevices"],[32,56,24,56],[32,57,24,57,"getUserMedia"],[32,69,24,69],[32,71,24,71],[33,6,25,8],[33,13,25,15,"navigator"],[33,22,25,24],[33,23,25,25,"mediaDevices"],[33,35,25,37],[33,36,25,38,"getUserMedia"],[33,48,25,50],[33,49,25,51,"constraints"],[33,60,25,62],[33,61,25,63],[34,4,26,4],[35,4,27,4],[36,4,28,4],[37,4,29,4],[38,4,30,4],[39,4,31,4],[39,10,31,10,"getUserMedia"],[39,22,31,22],[40,4,32,4],[41,4,33,4,"navigator"],[41,13,33,13],[41,14,33,14,"getUserMedia"],[41,26,33,26],[41,30,34,8,"navigator"],[41,39,34,17],[41,40,34,18,"webkitGetUserMedia"],[41,58,34,36],[41,62,35,8,"navigator"],[41,71,35,17],[41,72,35,18,"mozGetUserMedia"],[41,87,35,33],[41,91,36,8],[41,103,36,20],[42,6,37,12],[42,12,37,18,"error"],[42,17,37,23],[42,20,37,26],[42,24,37,30,"Error"],[42,29,37,35],[42,30,37,36],[42,56,37,62],[42,57,37,63],[43,6,38,12,"error"],[43,11,38,17],[43,12,38,18,"code"],[43,16,38,22],[43,19,38,25],[43,20,38,26],[44,6,39,12,"error"],[44,11,39,17],[44,12,39,18,"name"],[44,16,39,22],[44,19,39,25],[44,36,39,42],[45,6,40,12],[45,12,40,18,"error"],[45,17,40,23],[46,4,41,8],[46,5,41,9],[47,4,42,4],[47,11,42,11],[47,15,42,15,"Promise"],[47,22,42,22],[47,23,42,23],[47,24,42,24,"resolve"],[47,31,42,31],[47,33,42,33,"reject"],[47,39,42,39],[47,44,42,44],[48,6,43,8],[49,6,44,8],[50,6,45,8],[51,6,46,8,"getUserMedia"],[51,18,46,20],[51,19,46,21,"call"],[51,23,46,25],[51,24,46,26,"navigator"],[51,33,46,35],[51,35,46,37,"constraints"],[51,46,46,48],[51,48,46,50,"resolve"],[51,55,46,57],[51,57,46,59,"reject"],[51,63,46,65],[51,64,46,66],[52,4,47,4],[52,5,47,5],[52,6,47,6],[53,2,48,0],[54,2,49,0],[54,11,49,9,"getStatusFromMedia"],[54,29,49,27,"getStatusFromMedia"],[54,30,49,28,"media"],[54,35,49,33],[54,37,49,35],[55,4,50,4],[55,8,50,8],[55,9,50,9,"media"],[55,14,50,14],[55,16,50,16],[56,6,51,8],[56,13,51,15],[57,8,52,12,"isLoaded"],[57,16,52,20],[57,18,52,22],[57,23,52,27],[58,8,53,12,"error"],[58,13,53,17],[58,15,53,19,"undefined"],[59,6,54,8],[59,7,54,9],[60,4,55,4],[61,4,56,4],[61,10,56,10,"isPlaying"],[61,19,56,19],[61,22,56,22],[61,23,56,23],[61,25,56,25,"media"],[61,30,56,30],[61,31,56,31,"currentTime"],[61,42,56,42],[61,45,56,45],[61,46,56,46],[61,50,57,8],[61,51,57,9,"media"],[61,56,57,14],[61,57,57,15,"paused"],[61,63,57,21],[61,67,58,8],[61,68,58,9,"media"],[61,73,58,14],[61,74,58,15,"ended"],[61,79,58,20],[61,83,59,8,"media"],[61,88,59,13],[61,89,59,14,"readyState"],[61,99,59,24],[61,102,59,27],[61,103,59,28],[61,104,59,29],[62,4,60,4],[62,10,60,10,"status"],[62,16,60,16],[62,19,60,19],[63,6,61,8,"isLoaded"],[63,14,61,16],[63,16,61,18],[63,20,61,22],[64,6,62,8,"uri"],[64,9,62,11],[64,11,62,13,"media"],[64,16,62,18],[64,17,62,19,"src"],[64,20,62,22],[65,6,63,8,"progressUpdateIntervalMillis"],[65,34,63,36],[65,36,63,38],[65,39,63,41],[66,6,63,43],[67,6,64,8,"durationMillis"],[67,20,64,22],[67,22,64,24,"media"],[67,27,64,29],[67,28,64,30,"duration"],[67,36,64,38],[67,39,64,41],[67,43,64,45],[68,6,65,8,"positionMillis"],[68,20,65,22],[68,22,65,24,"media"],[68,27,65,29],[68,28,65,30,"currentTime"],[68,39,65,41],[68,42,65,44],[68,46,65,48],[69,6,66,8],[70,6,67,8],[71,6,68,8],[72,6,69,8,"shouldPlay"],[72,16,69,18],[72,18,69,20,"media"],[72,23,69,25],[72,24,69,26,"autoplay"],[72,32,69,34],[73,6,70,8,"isPlaying"],[73,15,70,17],[74,6,71,8,"isBuffering"],[74,17,71,19],[74,19,71,21],[74,24,71,26],[75,6,71,28],[76,6,72,8,"rate"],[76,10,72,12],[76,12,72,14,"media"],[76,17,72,19],[76,18,72,20,"playbackRate"],[76,30,72,32],[77,6,73,8],[78,6,74,8,"shouldCorrectPitch"],[78,24,74,26],[78,26,74,28],[78,31,74,33],[79,6,75,8,"volume"],[79,12,75,14],[79,14,75,16,"media"],[79,19,75,21],[79,20,75,22,"volume"],[79,26,75,28],[80,6,76,8,"audioPan"],[80,14,76,16],[80,16,76,18],[80,17,76,19],[81,6,77,8,"isMuted"],[81,13,77,15],[81,15,77,17,"media"],[81,20,77,22],[81,21,77,23,"muted"],[81,26,77,28],[82,6,78,8,"isLooping"],[82,15,78,17],[82,17,78,19,"media"],[82,22,78,24],[82,23,78,25,"loop"],[82,27,78,29],[83,6,79,8,"didJustFinish"],[83,19,79,21],[83,21,79,23,"media"],[83,26,79,28],[83,27,79,29,"ended"],[84,4,80,4],[84,5,80,5],[85,4,81,4],[85,11,81,11,"status"],[85,17,81,17],[86,2,82,0],[87,2,83,0],[87,17,83,15,"setStatusForMedia"],[87,34,83,32,"setStatusForMedia"],[87,35,83,33,"media"],[87,40,83,38],[87,42,83,40,"status"],[87,48,83,46],[87,50,83,48],[88,4,84,4],[88,8,84,8,"status"],[88,14,84,14],[88,15,84,15,"positionMillis"],[88,29,84,29],[88,34,84,34,"undefined"],[88,43,84,43],[88,45,84,45],[89,6,85,8,"media"],[89,11,85,13],[89,12,85,14,"currentTime"],[89,23,85,25],[89,26,85,28,"status"],[89,32,85,34],[89,33,85,35,"positionMillis"],[89,47,85,49],[89,50,85,52],[89,54,85,56],[90,4,86,4],[91,4,87,4],[92,4,88,4],[93,4,89,4],[94,4,90,4],[95,4,91,4],[96,4,92,4],[97,4,93,4],[98,4,94,4],[99,4,95,4],[100,4,96,4],[101,4,97,4],[102,4,98,4],[103,4,99,4],[103,8,99,8,"status"],[103,14,99,14],[103,15,99,15,"shouldPlay"],[103,25,99,25],[103,30,99,30,"undefined"],[103,39,99,39],[103,41,99,41],[104,6,100,8],[104,10,100,12,"status"],[104,16,100,18],[104,17,100,19,"shouldPlay"],[104,27,100,29],[104,29,100,31],[105,8,101,12],[105,14,101,18,"media"],[105,19,101,23],[105,20,101,24,"play"],[105,24,101,28],[105,25,101,29],[105,26,101,30],[106,6,102,8],[106,7,102,9],[106,13,103,13],[107,8,104,12],[107,14,104,18,"media"],[107,19,104,23],[107,20,104,24,"pause"],[107,25,104,29],[107,26,104,30],[107,27,104,31],[108,6,105,8],[109,4,106,4],[110,4,107,4],[110,8,107,8,"status"],[110,14,107,14],[110,15,107,15,"rate"],[110,19,107,19],[110,24,107,24,"undefined"],[110,33,107,33],[110,35,107,35],[111,6,108,8,"media"],[111,11,108,13],[111,12,108,14,"playbackRate"],[111,24,108,26],[111,27,108,29,"status"],[111,33,108,35],[111,34,108,36,"rate"],[111,38,108,40],[112,4,109,4],[113,4,110,4],[113,8,110,8,"status"],[113,14,110,14],[113,15,110,15,"shouldCorrectPitch"],[113,33,110,33],[113,38,110,38,"undefined"],[113,47,110,47],[113,49,110,49],[114,6,111,8,"media"],[114,11,111,13],[114,12,111,14,"preservesPitch"],[114,26,111,28],[114,29,111,31,"status"],[114,35,111,37],[114,36,111,38,"shouldCorrectPitch"],[114,54,111,56],[115,4,112,4],[116,4,113,4],[116,8,113,8,"status"],[116,14,113,14],[116,15,113,15,"volume"],[116,21,113,21],[116,26,113,26,"undefined"],[116,35,113,35],[116,37,113,37],[117,6,114,8,"media"],[117,11,114,13],[117,12,114,14,"volume"],[117,18,114,20],[117,21,114,23,"status"],[117,27,114,29],[117,28,114,30,"volume"],[117,34,114,36],[118,4,115,4],[119,4,116,4],[119,8,116,8,"status"],[119,14,116,14],[119,15,116,15,"isMuted"],[119,22,116,22],[119,27,116,27,"undefined"],[119,36,116,36],[119,38,116,38],[120,6,117,8,"media"],[120,11,117,13],[120,12,117,14,"muted"],[120,17,117,19],[120,20,117,22,"status"],[120,26,117,28],[120,27,117,29,"isMuted"],[120,34,117,36],[121,4,118,4],[122,4,119,4],[122,8,119,8,"status"],[122,14,119,14],[122,15,119,15,"isLooping"],[122,24,119,24],[122,29,119,29,"undefined"],[122,38,119,38],[122,40,119,40],[123,6,120,8,"media"],[123,11,120,13],[123,12,120,14,"loop"],[123,16,120,18],[123,19,120,21,"status"],[123,25,120,27],[123,26,120,28,"isLooping"],[123,35,120,37],[124,4,121,4],[125,4,122,4],[125,11,122,11,"getStatusFromMedia"],[125,29,122,29],[125,30,122,30,"media"],[125,35,122,35],[125,36,122,36],[126,2,123,0],[127,2,124,0],[127,6,124,4,"mediaRecorder"],[127,19,124,17],[127,22,124,20],[127,26,124,24],[128,2,125,0],[128,6,125,4,"mediaRecorderUptimeOfLastStartResume"],[128,42,125,40],[128,45,125,43],[128,46,125,44],[129,2,126,0],[129,6,126,4,"mediaRecorderDurationAlreadyRecorded"],[129,42,126,40],[129,45,126,43],[129,46,126,44],[130,2,127,0],[130,6,127,4,"mediaRecorderIsRecording"],[130,30,127,28],[130,33,127,31],[130,38,127,36],[131,2,128,0],[131,11,128,9,"getAudioRecorderDurationMillis"],[131,41,128,39,"getAudioRecorderDurationMillis"],[131,42,128,39],[131,44,128,42],[132,4,129,4],[132,8,129,8,"duration"],[132,16,129,16],[132,19,129,19,"mediaRecorderDurationAlreadyRecorded"],[132,55,129,55],[133,4,130,4],[133,8,130,8,"mediaRecorderIsRecording"],[133,32,130,32],[133,36,130,36,"mediaRecorderUptimeOfLastStartResume"],[133,72,130,72],[133,75,130,75],[133,76,130,76],[133,78,130,78],[134,6,131,8,"duration"],[134,14,131,16],[134,18,131,20,"Date"],[134,22,131,24],[134,23,131,25,"now"],[134,26,131,28],[134,27,131,29],[134,28,131,30],[134,31,131,33,"mediaRecorderUptimeOfLastStartResume"],[134,67,131,69],[135,4,132,4],[136,4,133,4],[136,11,133,11,"duration"],[136,19,133,19],[137,2,134,0],[138,2,134,1],[138,6,134,1,"_default"],[138,14,134,1],[138,17,134,1,"exports"],[138,24,134,1],[138,25,134,1,"default"],[138,32,134,1],[138,35,135,15],[139,4,136,4],[139,10,136,10,"getStatusForVideo"],[139,27,136,27,"getStatusForVideo"],[139,28,136,28,"element"],[139,35,136,35],[139,37,136,37],[140,6,137,8],[140,13,137,15,"getStatusFromMedia"],[140,31,137,33],[140,32,137,34,"element"],[140,39,137,41],[140,40,137,42],[141,4,138,4],[141,5,138,5],[142,4,139,4],[142,10,139,10,"loadForVideo"],[142,22,139,22,"loadForVideo"],[142,23,139,23,"element"],[142,30,139,30],[142,32,139,32,"nativeSource"],[142,44,139,44],[142,46,139,46,"fullInitialStatus"],[142,63,139,63],[142,65,139,65],[143,6,140,8],[143,13,140,15,"getStatusFromMedia"],[143,31,140,33],[143,32,140,34,"element"],[143,39,140,41],[143,40,140,42],[144,4,141,4],[144,5,141,5],[145,4,142,4],[145,10,142,10,"unloadForVideo"],[145,24,142,24,"unloadForVideo"],[145,25,142,25,"element"],[145,32,142,32],[145,34,142,34],[146,6,143,8],[146,13,143,15,"getStatusFromMedia"],[146,31,143,33],[146,32,143,34,"element"],[146,39,143,41],[146,40,143,42],[147,4,144,4],[147,5,144,5],[148,4,145,4],[148,10,145,10,"setStatusForVideo"],[148,27,145,27,"setStatusForVideo"],[148,28,145,28,"element"],[148,35,145,35],[148,37,145,37,"status"],[148,43,145,43],[148,45,145,45],[149,6,146,8],[149,13,146,15,"setStatusForMedia"],[149,30,146,32],[149,31,146,33,"element"],[149,38,146,40],[149,40,146,42,"status"],[149,46,146,48],[149,47,146,49],[150,4,147,4],[150,5,147,5],[151,4,148,4],[151,10,148,10,"replayVideo"],[151,21,148,21,"replayVideo"],[151,22,148,22,"element"],[151,29,148,29],[151,31,148,31,"status"],[151,37,148,37],[151,39,148,39],[152,6,149,8],[152,13,149,15,"setStatusForMedia"],[152,30,149,32],[152,31,149,33,"element"],[152,38,149,40],[152,40,149,42,"status"],[152,46,149,48],[152,47,149,49],[153,4,150,4],[153,5,150,5],[154,4,151,4],[155,4,152,4],[155,10,152,10,"setAudioMode"],[155,22,152,22,"setAudioMode"],[155,23,152,22],[155,25,152,25],[155,26,152,27],[155,27,152,28],[156,4,153,4],[156,10,153,10,"setAudioIsEnabled"],[156,27,153,27,"setAudioIsEnabled"],[156,28,153,27],[156,30,153,30],[156,31,153,32],[156,32,153,33],[157,4,154,4],[157,10,154,10,"getStatusForSound"],[157,27,154,27,"getStatusForSound"],[157,28,154,28,"element"],[157,35,154,35],[157,37,154,37],[158,6,155,8],[158,13,155,15,"getStatusFromMedia"],[158,31,155,33],[158,32,155,34,"element"],[158,39,155,41],[158,40,155,42],[159,4,156,4],[159,5,156,5],[160,4,157,4],[160,10,157,10,"loadForSound"],[160,22,157,22,"loadForSound"],[160,23,157,23,"nativeSource"],[160,35,157,35],[160,37,157,37,"fullInitialStatus"],[160,54,157,54],[160,56,157,56],[161,6,158,8],[161,12,158,14,"source"],[161,18,158,20],[161,21,158,23],[161,28,158,30,"nativeSource"],[161,40,158,42],[161,45,158,47],[161,53,158,55],[161,56,158,58,"nativeSource"],[161,68,158,70],[161,71,158,73,"nativeSource"],[161,83,158,85],[161,84,158,86,"uri"],[161,87,158,89],[162,6,159,8],[162,12,159,14,"media"],[162,17,159,19],[162,20,159,22],[162,24,159,26,"Audio"],[162,29,159,31],[162,30,159,32,"source"],[162,36,159,38],[162,37,159,39],[163,6,160,8,"media"],[163,11,160,13],[163,12,160,14,"ontimeupdate"],[163,24,160,26],[163,27,160,29],[163,33,160,35],[164,8,161,12,"DeviceEventEmitter"],[164,35,161,30],[164,36,161,31,"emit"],[164,40,161,35],[164,41,161,36],[164,66,161,61],[164,68,161,63],[165,10,162,16,"key"],[165,13,162,19],[165,15,162,21,"media"],[165,20,162,26],[166,10,163,16,"status"],[166,16,163,22],[166,18,163,24,"getStatusFromMedia"],[166,36,163,42],[166,37,163,43,"media"],[166,42,163,48],[167,8,164,12],[167,9,164,13],[167,10,164,14],[168,6,165,8],[168,7,165,9],[169,6,166,8,"media"],[169,11,166,13],[169,12,166,14,"onerror"],[169,19,166,21],[169,22,166,24],[169,28,166,30],[170,8,167,12,"DeviceEventEmitter"],[170,35,167,30],[170,36,167,31,"emit"],[170,40,167,35],[170,41,167,36],[170,61,167,56],[170,63,167,58],[171,10,168,16,"key"],[171,13,168,19],[171,15,168,21,"media"],[171,20,168,26],[172,10,169,16,"error"],[172,15,169,21],[172,17,169,23,"media"],[172,22,169,28],[172,23,169,29,"error"],[172,28,169,34],[172,29,169,35,"message"],[173,8,170,12],[173,9,170,13],[173,10,170,14],[174,6,171,8],[174,7,171,9],[175,6,172,8],[175,12,172,14,"status"],[175,18,172,20],[175,21,172,23],[175,27,172,29,"setStatusForMedia"],[175,44,172,46],[175,45,172,47,"media"],[175,50,172,52],[175,52,172,54,"fullInitialStatus"],[175,69,172,71],[175,70,172,72],[176,6,173,8],[176,13,173,15],[176,14,173,16,"media"],[176,19,173,21],[176,21,173,23,"status"],[176,27,173,29],[176,28,173,30],[177,4,174,4],[177,5,174,5],[178,4,175,4],[178,10,175,10,"unloadForSound"],[178,24,175,24,"unloadForSound"],[178,25,175,25,"element"],[178,32,175,32],[178,34,175,34],[179,6,176,8,"element"],[179,13,176,15],[179,14,176,16,"pause"],[179,19,176,21],[179,20,176,22],[179,21,176,23],[180,6,177,8,"element"],[180,13,177,15],[180,14,177,16,"removeAttribute"],[180,29,177,31],[180,30,177,32],[180,35,177,37],[180,36,177,38],[181,6,178,8,"element"],[181,13,178,15],[181,14,178,16,"load"],[181,18,178,20],[181,19,178,21],[181,20,178,22],[182,6,179,8],[182,13,179,15,"getStatusFromMedia"],[182,31,179,33],[182,32,179,34,"element"],[182,39,179,41],[182,40,179,42],[183,4,180,4],[183,5,180,5],[184,4,181,4],[184,10,181,10,"setStatusForSound"],[184,27,181,27,"setStatusForSound"],[184,28,181,28,"element"],[184,35,181,35],[184,37,181,37,"status"],[184,43,181,43],[184,45,181,45],[185,6,182,8],[185,13,182,15,"setStatusForMedia"],[185,30,182,32],[185,31,182,33,"element"],[185,38,182,40],[185,40,182,42,"status"],[185,46,182,48],[185,47,182,49],[186,4,183,4],[186,5,183,5],[187,4,184,4],[187,10,184,10,"replaySound"],[187,21,184,21,"replaySound"],[187,22,184,22,"element"],[187,29,184,29],[187,31,184,31,"status"],[187,37,184,37],[187,39,184,39],[188,6,185,8],[188,13,185,15,"setStatusForMedia"],[188,30,185,32],[188,31,185,33,"element"],[188,38,185,40],[188,40,185,42,"status"],[188,46,185,48],[188,47,185,49],[189,4,186,4],[189,5,186,5],[190,4,187,4],[191,4,188,4],[192,4,189,4],[192,10,189,10,"getAudioRecordingStatus"],[192,33,189,33,"getAudioRecordingStatus"],[192,34,189,33],[192,36,189,36],[193,6,190,8],[193,13,190,15],[194,8,191,12,"canRecord"],[194,17,191,21],[194,19,191,23,"mediaRecorder"],[194,32,191,36],[194,34,191,38,"state"],[194,39,191,43],[194,44,191,48],[194,55,191,59],[194,59,191,63,"mediaRecorder"],[194,72,191,76],[194,74,191,78,"state"],[194,79,191,83],[194,84,191,88],[194,94,191,98],[195,8,192,12,"isRecording"],[195,19,192,23],[195,21,192,25,"mediaRecorder"],[195,34,192,38],[195,36,192,40,"state"],[195,41,192,45],[195,46,192,50],[195,57,192,61],[196,8,193,12,"isDoneRecording"],[196,23,193,27],[196,25,193,29],[196,30,193,34],[197,8,194,12,"durationMillis"],[197,22,194,26],[197,24,194,28,"getAudioRecorderDurationMillis"],[197,54,194,58],[197,55,194,59],[197,56,194,60],[198,8,195,12,"uri"],[198,11,195,15],[198,13,195,17],[199,6,196,8],[199,7,196,9],[200,4,197,4],[200,5,197,5],[201,4,198,4],[202,4,199,4],[202,10,199,10,"prepareAudioRecorder"],[202,30,199,30,"prepareAudioRecorder"],[202,31,199,31,"options"],[202,38,199,38],[202,40,199,40],[203,6,200,8],[203,10,200,12],[203,17,200,19,"navigator"],[203,26,200,28],[203,31,200,33],[203,42,200,44],[203,46,200,48],[203,47,200,49,"navigator"],[203,56,200,58],[203,57,200,59,"mediaDevices"],[203,69,200,71],[203,71,200,73],[204,8,201,12],[204,14,201,18],[204,18,201,22,"Error"],[204,23,201,27],[204,24,201,28],[204,52,201,56],[204,53,201,57],[205,6,202,8],[206,6,203,8,"mediaRecorderUptimeOfLastStartResume"],[206,42,203,44],[206,45,203,47],[206,46,203,48],[207,6,204,8,"mediaRecorderDurationAlreadyRecorded"],[207,42,204,44],[207,45,204,47],[207,46,204,48],[208,6,205,8],[208,12,205,14,"stream"],[208,18,205,20],[208,21,205,23],[208,27,205,29,"getUserMedia"],[208,39,205,41],[208,40,205,42],[209,8,205,44,"audio"],[209,13,205,49],[209,15,205,51],[210,6,205,56],[210,7,205,57],[210,8,205,58],[211,6,206,8,"mediaRecorder"],[211,19,206,21],[211,22,206,24],[211,26,206,28,"window"],[211,32,206,34],[211,33,206,35,"MediaRecorder"],[211,46,206,48],[211,47,206,49,"stream"],[211,53,206,55],[211,55,206,57,"options"],[211,62,206,64],[211,64,206,66,"web"],[211,67,206,69],[211,71,206,73,"RecordingOptionsPresets"],[211,114,206,96],[211,115,206,97,"HIGH_QUALITY"],[211,127,206,109],[211,128,206,110,"web"],[211,131,206,113],[211,132,206,114],[212,6,207,8,"mediaRecorder"],[212,19,207,21],[212,20,207,22,"addEventListener"],[212,36,207,38],[212,37,207,39],[212,44,207,46],[212,46,207,48],[212,52,207,54],[213,8,208,12,"mediaRecorderDurationAlreadyRecorded"],[213,44,208,48],[213,47,208,51,"getAudioRecorderDurationMillis"],[213,77,208,81],[213,78,208,82],[213,79,208,83],[214,8,209,12,"mediaRecorderIsRecording"],[214,32,209,36],[214,35,209,39],[214,40,209,44],[215,6,210,8],[215,7,210,9],[215,8,210,10],[216,6,211,8,"mediaRecorder"],[216,19,211,21],[216,20,211,22,"addEventListener"],[216,36,211,38],[216,37,211,39],[216,45,211,47],[216,47,211,49],[216,53,211,55],[217,8,212,12,"mediaRecorderUptimeOfLastStartResume"],[217,44,212,48],[217,47,212,51,"Date"],[217,51,212,55],[217,52,212,56,"now"],[217,55,212,59],[217,56,212,60],[217,57,212,61],[218,8,213,12,"mediaRecorderIsRecording"],[218,32,213,36],[218,35,213,39],[218,39,213,43],[219,6,214,8],[219,7,214,9],[219,8,214,10],[220,6,215,8,"mediaRecorder"],[220,19,215,21],[220,20,215,22,"addEventListener"],[220,36,215,38],[220,37,215,39],[220,44,215,46],[220,46,215,48],[220,52,215,54],[221,8,216,12,"mediaRecorderUptimeOfLastStartResume"],[221,44,216,48],[221,47,216,51,"Date"],[221,51,216,55],[221,52,216,56,"now"],[221,55,216,59],[221,56,216,60],[221,57,216,61],[222,8,217,12,"mediaRecorderDurationAlreadyRecorded"],[222,44,217,48],[222,47,217,51],[222,48,217,52],[223,8,218,12,"mediaRecorderIsRecording"],[223,32,218,36],[223,35,218,39],[223,39,218,43],[224,6,219,8],[224,7,219,9],[224,8,219,10],[225,6,220,8,"mediaRecorder"],[225,19,220,21],[225,20,220,22,"addEventListener"],[225,36,220,38],[225,37,220,39],[225,43,220,45],[225,45,220,47],[225,51,220,53],[226,8,221,12,"mediaRecorderDurationAlreadyRecorded"],[226,44,221,48],[226,47,221,51,"getAudioRecorderDurationMillis"],[226,77,221,81],[226,78,221,82],[226,79,221,83],[227,8,222,12,"mediaRecorderIsRecording"],[227,32,222,36],[227,35,222,39],[227,40,222,44],[228,8,223,12],[229,8,224,12,"stream"],[229,14,224,18],[229,15,224,19,"getTracks"],[229,24,224,28],[229,25,224,29],[229,26,224,30],[229,27,224,31,"forEach"],[229,34,224,38],[229,35,224,40,"track"],[229,40,224,45],[229,44,224,50,"track"],[229,49,224,55],[229,50,224,56,"stop"],[229,54,224,60],[229,55,224,61],[229,56,224,62],[229,57,224,63],[230,6,225,8],[230,7,225,9],[230,8,225,10],[231,6,226,8],[231,12,226,14],[232,8,226,16,"uri"],[232,11,226,19],[233,8,226,21],[233,11,226,24,"status"],[234,6,226,31],[234,7,226,32],[234,10,226,35],[234,16,226,41],[234,20,226,45],[234,21,226,46,"getAudioRecordingStatus"],[234,44,226,69],[234,45,226,70],[234,46,226,71],[235,6,227,8],[235,13,227,15],[236,8,227,17,"uri"],[236,11,227,20],[236,13,227,22],[236,17,227,26],[237,8,227,28,"status"],[238,6,227,35],[238,7,227,36],[239,4,228,4],[239,5,228,5],[240,4,229,4],[240,10,229,10,"startAudioRecording"],[240,29,229,29,"startAudioRecording"],[240,30,229,29],[240,32,229,32],[241,6,230,8],[241,10,230,12,"mediaRecorder"],[241,23,230,25],[241,28,230,30],[241,32,230,34],[241,34,230,36],[242,8,231,12],[242,14,231,18],[242,18,231,22,"Error"],[242,23,231,27],[242,24,231,28],[242,169,231,173],[242,170,231,174],[243,6,232,8],[244,6,233,8],[244,10,233,12,"mediaRecorder"],[244,23,233,25],[244,24,233,26,"state"],[244,29,233,31],[244,34,233,36],[244,42,233,44],[244,44,233,46],[245,8,234,12,"mediaRecorder"],[245,21,234,25],[245,22,234,26,"resume"],[245,28,234,32],[245,29,234,33],[245,30,234,34],[246,6,235,8],[246,7,235,9],[246,13,236,13],[247,8,237,12,"mediaRecorder"],[247,21,237,25],[247,22,237,26,"start"],[247,27,237,31],[247,28,237,32],[247,29,237,33],[248,6,238,8],[249,6,239,8],[249,13,239,15],[249,17,239,19],[249,18,239,20,"getAudioRecordingStatus"],[249,41,239,43],[249,42,239,44],[249,43,239,45],[250,4,240,4],[250,5,240,5],[251,4,241,4],[251,10,241,10,"pauseAudioRecording"],[251,29,241,29,"pauseAudioRecording"],[251,30,241,29],[251,32,241,32],[252,6,242,8],[252,10,242,12,"mediaRecorder"],[252,23,242,25],[252,28,242,30],[252,32,242,34],[252,34,242,36],[253,8,243,12],[253,14,243,18],[253,18,243,22,"Error"],[253,23,243,27],[253,24,243,28],[253,169,243,173],[253,170,243,174],[254,6,244,8],[255,6,245,8],[256,6,246,8,"mediaRecorder"],[256,19,246,21],[256,20,246,22,"pause"],[256,25,246,27],[256,26,246,28],[256,27,246,29],[257,6,247,8],[257,13,247,15],[257,17,247,19],[257,18,247,20,"getAudioRecordingStatus"],[257,41,247,43],[257,42,247,44],[257,43,247,45],[258,4,248,4],[258,5,248,5],[259,4,249,4],[259,10,249,10,"stopAudioRecording"],[259,28,249,28,"stopAudioRecording"],[259,29,249,28],[259,31,249,31],[260,6,250,8],[260,12,250,14,"_mediaRecorder"],[260,26,250,28],[260,29,250,31,"mediaRecorder"],[260,42,250,44],[261,6,251,8],[261,10,251,12,"_mediaRecorder"],[261,24,251,26],[261,29,251,31],[261,33,251,35],[261,35,251,37],[262,8,252,12],[262,14,252,18],[262,18,252,22,"Error"],[262,23,252,27],[262,24,252,28],[262,169,252,173],[262,170,252,174],[263,6,253,8],[264,6,254,8],[264,10,254,12,"_mediaRecorder"],[264,24,254,26],[264,25,254,27,"state"],[264,30,254,32],[264,35,254,37],[264,45,254,47],[264,47,254,49],[265,8,255,12],[265,15,255,19],[265,19,255,23],[265,20,255,24,"getAudioRecordingStatus"],[265,43,255,47],[265,44,255,48],[265,45,255,49],[266,6,256,8],[267,6,257,8],[267,12,257,14,"dataPromise"],[267,23,257,25],[267,26,257,28],[267,30,257,32,"Promise"],[267,37,257,39],[267,38,257,41,"resolve"],[267,45,257,48],[267,49,257,53,"_mediaRecorder"],[267,63,257,67],[267,64,257,68,"addEventListener"],[267,80,257,84],[267,81,257,85],[267,96,257,100],[267,98,257,103,"e"],[267,99,257,104],[267,103,257,109,"resolve"],[267,110,257,116],[267,111,257,117,"e"],[267,112,257,118],[267,113,257,119,"data"],[267,117,257,123],[267,118,257,124],[267,119,257,125],[267,120,257,126],[268,6,258,8,"_mediaRecorder"],[268,20,258,22],[268,21,258,23,"stop"],[268,25,258,27],[268,26,258,28],[268,27,258,29],[269,6,259,8],[269,12,259,14,"data"],[269,16,259,18],[269,19,259,21],[269,25,259,27,"dataPromise"],[269,36,259,38],[270,6,260,8],[270,12,260,14,"url"],[270,15,260,17],[270,18,260,20,"URL"],[270,21,260,23],[270,22,260,24,"createObjectURL"],[270,37,260,39],[270,38,260,40,"data"],[270,42,260,44],[270,43,260,45],[271,6,261,8],[271,13,261,15],[272,8,262,12],[272,12,262,16],[272,18,262,22],[272,22,262,26],[272,23,262,27,"getAudioRecordingStatus"],[272,46,262,50],[272,47,262,51],[272,48,262,52],[272,49,262,53],[273,8,263,12,"uri"],[273,11,263,15],[273,13,263,17,"url"],[274,6,264,8],[274,7,264,9],[275,4,265,4],[275,5,265,5],[276,4,266,4],[276,10,266,10,"unloadAudioRecorder"],[276,29,266,29,"unloadAudioRecorder"],[276,30,266,29],[276,32,266,32],[277,6,267,8,"mediaRecorder"],[277,19,267,21],[277,22,267,24],[277,26,267,28],[278,4,268,4],[278,5,268,5],[279,4,269,4],[279,10,269,10,"getPermissionsAsync"],[279,29,269,29,"getPermissionsAsync"],[279,30,269,29],[279,32,269,32],[280,6,270,8],[280,12,270,14,"maybeStatus"],[280,23,270,25],[280,26,270,28],[280,32,270,34,"getPermissionWithQueryAsync"],[280,59,270,61],[280,60,270,62],[280,72,270,74],[280,73,270,75],[281,6,271,8],[281,14,271,16,"maybeStatus"],[281,25,271,27],[282,8,272,12],[282,13,272,17,"PermissionStatus"],[282,46,272,33],[282,47,272,34,"GRANTED"],[282,54,272,41],[283,10,273,16],[283,17,273,23],[284,12,274,20,"status"],[284,18,274,26],[284,20,274,28,"PermissionStatus"],[284,53,274,44],[284,54,274,45,"GRANTED"],[284,61,274,52],[285,12,275,20,"expires"],[285,19,275,27],[285,21,275,29],[285,28,275,36],[286,12,276,20,"canAskAgain"],[286,23,276,31],[286,25,276,33],[286,29,276,37],[287,12,277,20,"granted"],[287,19,277,27],[287,21,277,29],[288,10,278,16],[288,11,278,17],[289,8,279,12],[289,13,279,17,"PermissionStatus"],[289,46,279,33],[289,47,279,34,"DENIED"],[289,53,279,40],[290,10,280,16],[290,17,280,23],[291,12,281,20,"status"],[291,18,281,26],[291,20,281,28,"PermissionStatus"],[291,53,281,44],[291,54,281,45,"DENIED"],[291,60,281,51],[292,12,282,20,"expires"],[292,19,282,27],[292,21,282,29],[292,28,282,36],[293,12,283,20,"canAskAgain"],[293,23,283,31],[293,25,283,33],[293,29,283,37],[294,12,284,20,"granted"],[294,19,284,27],[294,21,284,29],[295,10,285,16],[295,11,285,17],[296,8,286,12],[297,10,287,16],[297,17,287,23],[297,23,287,29],[297,27,287,33],[297,28,287,34,"requestPermissionsAsync"],[297,51,287,57],[297,52,287,58],[297,53,287,59],[298,6,288,8],[299,4,289,4],[299,5,289,5],[300,4,290,4],[300,10,290,10,"requestPermissionsAsync"],[300,33,290,33,"requestPermissionsAsync"],[300,34,290,33],[300,36,290,36],[301,6,291,8],[301,10,291,12],[302,8,292,12],[302,14,292,18,"stream"],[302,20,292,24],[302,23,292,27],[302,29,292,33,"getUserMedia"],[302,41,292,45],[302,42,292,46],[303,10,292,48,"audio"],[303,15,292,53],[303,17,292,55],[304,8,292,60],[304,9,292,61],[304,10,292,62],[305,8,293,12,"stream"],[305,14,293,18],[305,15,293,19,"getTracks"],[305,24,293,28],[305,25,293,29],[305,26,293,30],[305,27,293,31,"forEach"],[305,34,293,38],[305,35,293,40,"track"],[305,40,293,45],[305,44,293,50,"track"],[305,49,293,55],[305,50,293,56,"stop"],[305,54,293,60],[305,55,293,61],[305,56,293,62],[305,57,293,63],[306,8,294,12],[306,15,294,19],[307,10,295,16,"status"],[307,16,295,22],[307,18,295,24,"PermissionStatus"],[307,51,295,40],[307,52,295,41,"GRANTED"],[307,59,295,48],[308,10,296,16,"expires"],[308,17,296,23],[308,19,296,25],[308,26,296,32],[309,10,297,16,"canAskAgain"],[309,21,297,27],[309,23,297,29],[309,27,297,33],[310,10,298,16,"granted"],[310,17,298,23],[310,19,298,25],[311,8,299,12],[311,9,299,13],[312,6,300,8],[312,7,300,9],[312,8,301,8],[312,14,301,14],[313,8,302,12],[313,15,302,19],[314,10,303,16,"status"],[314,16,303,22],[314,18,303,24,"PermissionStatus"],[314,51,303,40],[314,52,303,41,"DENIED"],[314,58,303,47],[315,10,304,16,"expires"],[315,17,304,23],[315,19,304,25],[315,26,304,32],[316,10,305,16,"canAskAgain"],[316,21,305,27],[316,23,305,29],[316,27,305,33],[317,10,306,16,"granted"],[317,17,306,23],[317,19,306,25],[318,8,307,12],[318,9,307,13],[319,6,308,8],[320,4,309,4],[321,2,310,0],[321,3,310,1],[322,0,310,1],[322,3]],"functionMap":{"names":["<global>","getPermissionWithQueryAsync","getUserMedia","<anonymous>","Promise$argument_0","getStatusFromMedia","setStatusForMedia","getAudioRecorderDurationMillis","default.getStatusForVideo","default.loadForVideo","default.unloadForVideo","default.setStatusForVideo","default.replayVideo","default.setAudioMode","default.setAudioIsEnabled","default.getStatusForSound","default.loadForSound","media.ontimeupdate","media.onerror","default.unloadForSound","default.setStatusForSound","default.replaySound","default.getAudioRecordingStatus","default.prepareAudioRecorder","mediaRecorder.addEventListener$argument_1","stream.getTracks.forEach$argument_0","default.startAudioRecording","default.pauseAudioRecording","default.stopAudioRecording","_mediaRecorder.addEventListener$argument_1","default.unloadAudioRecorder","default.getPermissionsAsync","default.requestPermissionsAsync"],"mappings":"AAA;ACG;CDkB;AEC;QCa;SDK;uBEC;KFK;CFC;AKC;CLiC;AMC;CNwC;AOK;CPM;IQE;KRE;ISC;KTE;IUC;KVE;IWC;KXE;IYC;KZE;IaE,wBb;IcC,6Bd;IeC;KfE;IgBC;6BCG;SDK;wBEC;SFK;KhBG;ImBC;KnBK;IoBC;KpBE;IqBC;KrBE;IsBG;KtBQ;IuBE;gDCQ;SDG;iDCC;SDG;gDCC;SDI;+CCC;uCCI,uBD;SDC;KvBG;I0BC;K1BW;I2BC;K3BO;I4BC;wCxBQ,8DyB,sBzB,CwB;K5BQ;I8BC;K9BE;I+BC;K/BoB;IgCC;uCPG,uBO;KhCgB"}},"type":"js/module"}]}