{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":86,"index":86}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./AudioAvailability","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":87},"end":{"line":2,"column":61,"index":148}}],"key":"bSBjZOQMb5YC9PXMSfyUskC29qA=","exportNames":["*"]}},{"name":"../AV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":149},"end":{"line":3,"column":135,"index":284}}],"key":"CKKx7GRKZ+dPvq8Nb7FmQZUl2kI=","exportNames":["*"]}},{"name":"../ExponentAV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":285},"end":{"line":4,"column":39,"index":324}}],"key":"EFxOD5hqmWNncIOpuO+BTl9k+bk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Sound = void 0;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _AudioAvailability = require(_dependencyMap[2], \"./AudioAvailability\");\n  var _AV = require(_dependencyMap[3], \"../AV\");\n  var _ExponentAV = _interopRequireDefault(require(_dependencyMap[4], \"../ExponentAV\"));\n  // @needsAudit\n  /**\n   * This class represents a sound corresponding to an Asset or URL.\n   * @return A newly constructed instance of `Audio.Sound`.\n   *\n   * @example\n   * ```ts\n   * const sound = new Audio.Sound();\n   * try {\n   *   await sound.loadAsync(require('./assets/sounds/hello.mp3'));\n   *   await sound.playAsync();\n   *   // Your sound is playing!\n   *\n   *   // Don't forget to unload the sound from memory\n   *   // when you are done using the Sound object\n   *   await sound.unloadAsync();\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * > Method not described below and the rest of the API for `Audio.Sound` is the same as the imperative playback API for `Video`.\n   * > See the [AV documentation](/versions/latest/sdk/av) for further information.\n   */\n  class Sound {\n    _loaded = false;\n    _loading = false;\n    _key = null;\n    _lastStatusUpdate = null;\n    _lastStatusUpdateTime = null;\n    _subscriptions = [];\n    _eventEmitter = new _expoModulesCore.LegacyEventEmitter(_ExponentAV.default);\n    _coalesceStatusUpdatesInMillis = 100;\n    _onPlaybackStatusUpdate = null;\n    _onMetadataUpdate = null;\n    _onAudioSampleReceived = null;\n    /** @deprecated Use `Sound.createAsync()` instead */\n    static create = async (source, initialStatus = {}, onPlaybackStatusUpdate = null, downloadFirst = true) => {\n      console.warn(`Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`);\n      return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n    };\n    /**\n     * Creates and loads a sound from source.\n     *\n     * ```ts\n     * const { sound } = await Audio.Sound.createAsync(\n     *   source,\n     *   initialStatus,\n     *   onPlaybackStatusUpdate,\n     *   downloadFirst\n     * );\n     *\n     * // Which is equivalent to the following:\n     * const sound = new Audio.Sound();\n     * sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n     * await sound.loadAsync(source, initialStatus, downloadFirst);\n     * ```\n     *\n     * @param source The source of the sound. See the [AV documentation](/versions/latest/sdk/av/#playback-api) for details on the possible `source` values.\n     *\n     * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n     * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet` and the default\n     * initial playback status.\n     *\n     * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n     * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n     *\n     * @param downloadFirst If set to true, the system will attempt to download the resource to the device before loading. This value defaults to `true`.\n     * Note that at the moment, this will only work for `source`s of the form `require('path/to/file')` or `Asset` objects.\n     *\n     * @example\n     * ```ts\n     * try {\n     *   const { sound: soundObject, status } = await Audio.Sound.createAsync(\n     *     require('./assets/sounds/hello.mp3'),\n     *     { shouldPlay: true }\n     *   );\n     *   // Your sound is playing!\n     * } catch (error) {\n     *   // An error occurred!\n     * }\n     * ```\n     *\n     * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject` if creation succeeded.\n     */\n    static createAsync = async (source, initialStatus = {}, onPlaybackStatusUpdate = null, downloadFirst = true) => {\n      const sound = new Sound();\n      sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n      const status = await sound.loadAsync(source, initialStatus, downloadFirst);\n      return {\n        sound,\n        status\n      };\n    };\n    // Internal methods\n    _callOnPlaybackStatusUpdateForNewStatus(status) {\n      const shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n      if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n        this._onPlaybackStatusUpdate(status);\n        this._lastStatusUpdateTime = new Date();\n        this._lastStatusUpdate = JSON.stringify(status);\n      }\n    }\n    async _performOperationAndHandleStatusAsync(operation) {\n      (0, _AudioAvailability.throwIfAudioIsDisabled)();\n      if (this._loaded) {\n        const status = await operation();\n        this._callOnPlaybackStatusUpdateForNewStatus(status);\n        return status;\n      } else {\n        throw new Error('Cannot complete operation because sound is not loaded.');\n      }\n    }\n    _updateAudioSampleReceivedCallback() {\n      if (globalThis.__EXAV_setOnAudioSampleReceivedCallback == null) {\n        if (_expoModulesCore.Platform.OS === 'ios' || _expoModulesCore.Platform.OS === 'android') {\n          console.warn('expo-av: Failed to set up Audio Sample Buffer callback. ' + \"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \" + 'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.');\n          return;\n        } else {\n          throw new _expoModulesCore.UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n        }\n      }\n      if (this._key == null) {\n        throw new Error('Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!');\n      }\n      if (typeof this._key !== 'number') {\n        throw new Error(`Cannot set Audio Sample Buffer callback when Sound instance key is of type ${typeof this._key}! (expected: number)`);\n      }\n      globalThis.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n    }\n    _internalStatusUpdateCallback = ({\n      key,\n      status\n    }) => {\n      if (this._key === key) {\n        this._callOnPlaybackStatusUpdateForNewStatus(status);\n      }\n    };\n    _internalMetadataUpdateCallback = ({\n      key,\n      metadata\n    }) => {\n      if (this._key === key) {\n        this._onMetadataUpdate?.(metadata);\n      }\n    };\n    _internalErrorCallback = ({\n      key,\n      error\n    }) => {\n      if (this._key === key) {\n        this._errorCallback(error);\n      }\n    };\n    // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n    _subscribeToNativeEvents() {\n      if (this._loaded) {\n        this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback), this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback));\n        this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback));\n      }\n    }\n    _clearSubscriptions() {\n      this._subscriptions.forEach(e => e.remove());\n      this._subscriptions = [];\n    }\n    _errorCallback = error => {\n      this._clearSubscriptions();\n      this._loaded = false;\n      this._key = null;\n      this._callOnPlaybackStatusUpdateForNewStatus((0, _AV.getUnloadedStatus)(error));\n    };\n    // ### Unified playback API ### (consistent with Video.js)\n    // All calls automatically call onPlaybackStatusUpdate as a side effect.\n    // Get status API\n    getStatusAsync = async () => {\n      if (this._loaded) {\n        return this._performOperationAndHandleStatusAsync(() => _ExponentAV.default.getStatusForSound(this._key));\n      }\n      const status = (0, _AV.getUnloadedStatus)();\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    };\n    /**\n     * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n     *\n     * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n     * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n     * while the media is in the loaded state.\n     *\n     * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n     * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n     *\n     * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n     */\n    setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n      this.getStatusAsync();\n    }\n    /**\n     * Sets a function to be called whenever the metadata of the sound object changes, if one is set.\n     * @param onMetadataUpdate A function taking a single object of type `AVMetadata` as a parameter.\n     * @platform ios\n     */\n    setOnMetadataUpdate(onMetadataUpdate) {\n      this._onMetadataUpdate = onMetadataUpdate;\n    }\n    /**\n     * Sets a function to be called during playback, receiving the audio sample as parameter.\n     * @param callback A function taking the `AudioSampleCallback` as parameter.\n     */\n    setOnAudioSampleReceived(callback) {\n      this._onAudioSampleReceived = callback;\n      if (this._key != null) {\n        this._updateAudioSampleReceivedCallback();\n      }\n    }\n    // Loading / unloading API\n    async loadAsync(source, initialStatus = {}, downloadFirst = true) {\n      (0, _AudioAvailability.throwIfAudioIsDisabled)();\n      if (this._loading) {\n        throw new Error('The Sound is already loading.');\n      }\n      if (!this._loaded) {\n        this._loading = true;\n        const {\n          nativeSource,\n          fullInitialStatus\n        } = await (0, _AV.getNativeSourceAndFullInitialStatusForLoadAsync)(source, initialStatus, downloadFirst);\n        // This is a workaround, since using load with resolve / reject seems to not work.\n        return new Promise((resolve, reject) => {\n          const loadSuccess = result => {\n            const [key, status] = result;\n            this._key = key;\n            this._loaded = true;\n            this._loading = false;\n            this._subscribeToNativeEvents();\n            this._callOnPlaybackStatusUpdateForNewStatus(status);\n            resolve(status);\n          };\n          const loadError = error => {\n            this._loading = false;\n            reject(error);\n          };\n          _ExponentAV.default.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n        });\n      } else {\n        throw new Error('The Sound is already loaded.');\n      }\n    }\n    async unloadAsync() {\n      if (this._loaded) {\n        this._loaded = false;\n        const key = this._key;\n        this._key = null;\n        const status = await _ExponentAV.default.unloadForSound(key);\n        this._callOnPlaybackStatusUpdateForNewStatus(status);\n        this._clearSubscriptions();\n        return status;\n      } else {\n        return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n      }\n    }\n    // Set status API (only available while isLoaded = true)\n    async setStatusAsync(status) {\n      (0, _AV.assertStatusValuesInBounds)(status);\n      return this._performOperationAndHandleStatusAsync(() => _ExponentAV.default.setStatusForSound(this._key, status));\n    }\n    async replayAsync(status = {}) {\n      if (status.positionMillis && status.positionMillis !== 0) {\n        throw new Error('Requested position after replay has to be 0.');\n      }\n      return this._performOperationAndHandleStatusAsync(() => _ExponentAV.default.replaySound(this._key, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true\n      }));\n    }\n    // Methods of the Playback interface that are set via PlaybackMixin\n  }\n  exports.Sound = Sound;\n  Object.assign(Sound.prototype, _AV.PlaybackMixin);\n});","lineCount":292,"map":[[7,2,1,0],[7,6,1,0,"_expoModulesCore"],[7,22,1,0],[7,25,1,0,"require"],[7,32,1,0],[7,33,1,0,"_dependencyMap"],[7,47,1,0],[8,2,2,0],[8,6,2,0,"_AudioAvailability"],[8,24,2,0],[8,27,2,0,"require"],[8,34,2,0],[8,35,2,0,"_dependencyMap"],[8,49,2,0],[9,2,3,0],[9,6,3,0,"_AV"],[9,9,3,0],[9,12,3,0,"require"],[9,19,3,0],[9,20,3,0,"_dependencyMap"],[9,34,3,0],[10,2,4,0],[10,6,4,0,"_ExponentAV"],[10,17,4,0],[10,20,4,0,"_interopRequireDefault"],[10,42,4,0],[10,43,4,0,"require"],[10,50,4,0],[10,51,4,0,"_dependencyMap"],[10,65,4,0],[11,2,5,0],[12,2,6,0],[13,0,7,0],[14,0,8,0],[15,0,9,0],[16,0,10,0],[17,0,11,0],[18,0,12,0],[19,0,13,0],[20,0,14,0],[21,0,15,0],[22,0,16,0],[23,0,17,0],[24,0,18,0],[25,0,19,0],[26,0,20,0],[27,0,21,0],[28,0,22,0],[29,0,23,0],[30,0,24,0],[31,0,25,0],[32,0,26,0],[33,0,27,0],[34,0,28,0],[35,2,29,7],[35,8,29,13,"Sound"],[35,13,29,18],[35,14,29,19],[36,4,30,4,"_loaded"],[36,11,30,11],[36,14,30,14],[36,19,30,19],[37,4,31,4,"_loading"],[37,12,31,12],[37,15,31,15],[37,20,31,20],[38,4,32,4,"_key"],[38,8,32,8],[38,11,32,11],[38,15,32,15],[39,4,33,4,"_lastStatusUpdate"],[39,21,33,21],[39,24,33,24],[39,28,33,28],[40,4,34,4,"_lastStatusUpdateTime"],[40,25,34,25],[40,28,34,28],[40,32,34,32],[41,4,35,4,"_subscriptions"],[41,18,35,18],[41,21,35,21],[41,23,35,23],[42,4,36,4,"_eventEmitter"],[42,17,36,17],[42,20,36,20],[42,24,36,24,"LegacyEventEmitter"],[42,59,36,42],[42,60,36,43,"ExponentAV"],[42,79,36,53],[42,80,36,54],[43,4,37,4,"_coalesceStatusUpdatesInMillis"],[43,34,37,34],[43,37,37,37],[43,40,37,40],[44,4,38,4,"_onPlaybackStatusUpdate"],[44,27,38,27],[44,30,38,30],[44,34,38,34],[45,4,39,4,"_onMetadataUpdate"],[45,21,39,21],[45,24,39,24],[45,28,39,28],[46,4,40,4,"_onAudioSampleReceived"],[46,26,40,26],[46,29,40,29],[46,33,40,33],[47,4,41,4],[48,4,42,4],[48,11,42,11,"create"],[48,17,42,17],[48,20,42,20],[48,26,42,20,"create"],[48,27,42,27,"source"],[48,33,42,33],[48,35,42,35,"initialStatus"],[48,48,42,48],[48,51,42,51],[48,52,42,52],[48,53,42,53],[48,55,42,55,"onPlaybackStatusUpdate"],[48,77,42,77],[48,80,42,80],[48,84,42,84],[48,86,42,86,"downloadFirst"],[48,99,42,99],[48,102,42,102],[48,106,42,106],[48,111,42,111],[49,6,43,8,"console"],[49,13,43,15],[49,14,43,16,"warn"],[49,18,43,20],[49,19,43,21],[49,126,43,128],[49,127,43,129],[50,6,44,8],[50,13,44,15,"Sound"],[50,18,44,20],[50,19,44,21,"createAsync"],[50,30,44,32],[50,31,44,33,"source"],[50,37,44,39],[50,39,44,41,"initialStatus"],[50,52,44,54],[50,54,44,56,"onPlaybackStatusUpdate"],[50,76,44,78],[50,78,44,80,"downloadFirst"],[50,91,44,93],[50,92,44,94],[51,4,45,4],[51,5,45,5],[52,4,46,4],[53,0,47,0],[54,0,48,0],[55,0,49,0],[56,0,50,0],[57,0,51,0],[58,0,52,0],[59,0,53,0],[60,0,54,0],[61,0,55,0],[62,0,56,0],[63,0,57,0],[64,0,58,0],[65,0,59,0],[66,0,60,0],[67,0,61,0],[68,0,62,0],[69,0,63,0],[70,0,64,0],[71,0,65,0],[72,0,66,0],[73,0,67,0],[74,0,68,0],[75,0,69,0],[76,0,70,0],[77,0,71,0],[78,0,72,0],[79,0,73,0],[80,0,74,0],[81,0,75,0],[82,0,76,0],[83,0,77,0],[84,0,78,0],[85,0,79,0],[86,0,80,0],[87,0,81,0],[88,0,82,0],[89,0,83,0],[90,0,84,0],[91,0,85,0],[92,0,86,0],[93,0,87,0],[94,0,88,0],[95,0,89,0],[96,4,90,4],[96,11,90,11,"createAsync"],[96,22,90,22],[96,25,90,25],[96,31,90,25,"createAsync"],[96,32,90,32,"source"],[96,38,90,38],[96,40,90,40,"initialStatus"],[96,53,90,53],[96,56,90,56],[96,57,90,57],[96,58,90,58],[96,60,90,60,"onPlaybackStatusUpdate"],[96,82,90,82],[96,85,90,85],[96,89,90,89],[96,91,90,91,"downloadFirst"],[96,104,90,104],[96,107,90,107],[96,111,90,111],[96,116,90,116],[97,6,91,8],[97,12,91,14,"sound"],[97,17,91,19],[97,20,91,22],[97,24,91,26,"Sound"],[97,29,91,31],[97,30,91,32],[97,31,91,33],[98,6,92,8,"sound"],[98,11,92,13],[98,12,92,14,"setOnPlaybackStatusUpdate"],[98,37,92,39],[98,38,92,40,"onPlaybackStatusUpdate"],[98,60,92,62],[98,61,92,63],[99,6,93,8],[99,12,93,14,"status"],[99,18,93,20],[99,21,93,23],[99,27,93,29,"sound"],[99,32,93,34],[99,33,93,35,"loadAsync"],[99,42,93,44],[99,43,93,45,"source"],[99,49,93,51],[99,51,93,53,"initialStatus"],[99,64,93,66],[99,66,93,68,"downloadFirst"],[99,79,93,81],[99,80,93,82],[100,6,94,8],[100,13,94,15],[101,8,94,17,"sound"],[101,13,94,22],[102,8,94,24,"status"],[103,6,94,31],[103,7,94,32],[104,4,95,4],[104,5,95,5],[105,4,96,4],[106,4,97,4,"_callOnPlaybackStatusUpdateForNewStatus"],[106,43,97,43,"_callOnPlaybackStatusUpdateForNewStatus"],[106,44,97,44,"status"],[106,50,97,50],[106,52,97,52],[107,6,98,8],[107,12,98,14,"shouldDismissBasedOnCoalescing"],[107,42,98,44],[107,45,98,47],[107,49,98,51],[107,50,98,52,"_lastStatusUpdateTime"],[107,71,98,73],[107,75,99,12,"JSON"],[107,79,99,16],[107,80,99,17,"stringify"],[107,89,99,26],[107,90,99,27,"status"],[107,96,99,33],[107,97,99,34],[107,102,99,39],[107,106,99,43],[107,107,99,44,"_lastStatusUpdate"],[107,124,99,61],[107,128,100,12,"Date"],[107,132,100,16],[107,133,100,17,"now"],[107,136,100,20],[107,137,100,21],[107,138,100,22],[107,141,100,25],[107,145,100,29],[107,146,100,30,"_lastStatusUpdateTime"],[107,167,100,51],[107,168,100,52,"getTime"],[107,175,100,59],[107,176,100,60],[107,177,100,61],[107,180,100,64],[107,184,100,68],[107,185,100,69,"_coalesceStatusUpdatesInMillis"],[107,215,100,99],[108,6,101,8],[108,10,101,12],[108,14,101,16],[108,15,101,17,"_onPlaybackStatusUpdate"],[108,38,101,40],[108,42,101,44],[108,46,101,48],[108,50,101,52],[108,51,101,53,"shouldDismissBasedOnCoalescing"],[108,81,101,83],[108,83,101,85],[109,8,102,12],[109,12,102,16],[109,13,102,17,"_onPlaybackStatusUpdate"],[109,36,102,40],[109,37,102,41,"status"],[109,43,102,47],[109,44,102,48],[110,8,103,12],[110,12,103,16],[110,13,103,17,"_lastStatusUpdateTime"],[110,34,103,38],[110,37,103,41],[110,41,103,45,"Date"],[110,45,103,49],[110,46,103,50],[110,47,103,51],[111,8,104,12],[111,12,104,16],[111,13,104,17,"_lastStatusUpdate"],[111,30,104,34],[111,33,104,37,"JSON"],[111,37,104,41],[111,38,104,42,"stringify"],[111,47,104,51],[111,48,104,52,"status"],[111,54,104,58],[111,55,104,59],[112,6,105,8],[113,4,106,4],[114,4,107,4],[114,10,107,10,"_performOperationAndHandleStatusAsync"],[114,47,107,47,"_performOperationAndHandleStatusAsync"],[114,48,107,48,"operation"],[114,57,107,57],[114,59,107,59],[115,6,108,8],[115,10,108,8,"throwIfAudioIsDisabled"],[115,51,108,30],[115,53,108,31],[115,54,108,32],[116,6,109,8],[116,10,109,12],[116,14,109,16],[116,15,109,17,"_loaded"],[116,22,109,24],[116,24,109,26],[117,8,110,12],[117,14,110,18,"status"],[117,20,110,24],[117,23,110,27],[117,29,110,33,"operation"],[117,38,110,42],[117,39,110,43],[117,40,110,44],[118,8,111,12],[118,12,111,16],[118,13,111,17,"_callOnPlaybackStatusUpdateForNewStatus"],[118,52,111,56],[118,53,111,57,"status"],[118,59,111,63],[118,60,111,64],[119,8,112,12],[119,15,112,19,"status"],[119,21,112,25],[120,6,113,8],[120,7,113,9],[120,13,114,13],[121,8,115,12],[121,14,115,18],[121,18,115,22,"Error"],[121,23,115,27],[121,24,115,28],[121,80,115,84],[121,81,115,85],[122,6,116,8],[123,4,117,4],[124,4,118,4,"_updateAudioSampleReceivedCallback"],[124,38,118,38,"_updateAudioSampleReceivedCallback"],[124,39,118,38],[124,41,118,41],[125,6,119,8],[125,10,119,12,"globalThis"],[125,20,119,22],[125,21,119,23,"__EXAV_setOnAudioSampleReceivedCallback"],[125,60,119,62],[125,64,119,66],[125,68,119,70],[125,70,119,72],[126,8,120,12],[126,12,120,16,"Platform"],[126,37,120,24],[126,38,120,25,"OS"],[126,40,120,27],[126,45,120,32],[126,50,120,37],[126,54,120,41,"Platform"],[126,79,120,49],[126,80,120,50,"OS"],[126,82,120,52],[126,87,120,57],[126,96,120,66],[126,98,120,68],[127,10,121,16,"console"],[127,17,121,23],[127,18,121,24,"warn"],[127,22,121,28],[127,23,121,29],[127,81,121,87],[127,84,122,20],[127,198,122,134],[127,201,123,20],[127,321,123,140],[127,322,123,141],[128,10,124,16],[129,8,125,12],[129,9,125,13],[129,15,126,17],[130,10,127,16],[130,16,127,22],[130,20,127,26,"UnavailabilityError"],[130,56,127,45],[130,57,127,46],[130,66,127,55],[130,68,127,57],[130,94,127,83],[130,95,127,84],[131,8,128,12],[132,6,129,8],[133,6,130,8],[133,10,130,12],[133,14,130,16],[133,15,130,17,"_key"],[133,19,130,21],[133,23,130,25],[133,27,130,29],[133,29,130,31],[134,8,131,12],[134,14,131,18],[134,18,131,22,"Error"],[134,23,131,27],[134,24,131,28],[134,135,131,139],[134,136,131,140],[135,6,132,8],[136,6,133,8],[136,10,133,12],[136,17,133,19],[136,21,133,23],[136,22,133,24,"_key"],[136,26,133,28],[136,31,133,33],[136,39,133,41],[136,41,133,43],[137,8,134,12],[137,14,134,18],[137,18,134,22,"Error"],[137,23,134,27],[137,24,134,28],[137,102,134,106],[137,109,134,113],[137,113,134,117],[137,114,135,17,"_key"],[137,118,135,21],[137,140,135,43],[137,141,135,44],[138,6,136,8],[139,6,137,8,"globalThis"],[139,16,137,18],[139,17,137,19,"__EXAV_setOnAudioSampleReceivedCallback"],[139,56,137,58],[139,57,137,59],[139,61,137,63],[139,62,137,64,"_key"],[139,66,137,68],[139,68,137,70],[139,72,137,74],[139,73,137,75,"_onAudioSampleReceived"],[139,95,137,97],[139,96,137,98],[140,4,138,4],[141,4,139,4,"_internalStatusUpdateCallback"],[141,33,139,33],[141,36,139,36,"_internalStatusUpdateCallback"],[141,37,139,37],[142,6,139,39,"key"],[142,9,139,42],[143,6,139,44,"status"],[144,4,139,52],[144,5,139,53],[144,10,139,58],[145,6,140,8],[145,10,140,12],[145,14,140,16],[145,15,140,17,"_key"],[145,19,140,21],[145,24,140,26,"key"],[145,27,140,29],[145,29,140,31],[146,8,141,12],[146,12,141,16],[146,13,141,17,"_callOnPlaybackStatusUpdateForNewStatus"],[146,52,141,56],[146,53,141,57,"status"],[146,59,141,63],[146,60,141,64],[147,6,142,8],[148,4,143,4],[148,5,143,5],[149,4,144,4,"_internalMetadataUpdateCallback"],[149,35,144,35],[149,38,144,38,"_internalMetadataUpdateCallback"],[149,39,144,39],[150,6,144,41,"key"],[150,9,144,44],[151,6,144,46,"metadata"],[152,4,144,56],[152,5,144,57],[152,10,144,62],[153,6,145,8],[153,10,145,12],[153,14,145,16],[153,15,145,17,"_key"],[153,19,145,21],[153,24,145,26,"key"],[153,27,145,29],[153,29,145,31],[154,8,146,12],[154,12,146,16],[154,13,146,17,"_onMetadataUpdate"],[154,30,146,34],[154,33,146,37,"metadata"],[154,41,146,45],[154,42,146,46],[155,6,147,8],[156,4,148,4],[156,5,148,5],[157,4,149,4,"_internalErrorCallback"],[157,26,149,26],[157,29,149,29,"_internalErrorCallback"],[157,30,149,30],[158,6,149,32,"key"],[158,9,149,35],[159,6,149,37,"error"],[160,4,149,43],[160,5,149,44],[160,10,149,49],[161,6,150,8],[161,10,150,12],[161,14,150,16],[161,15,150,17,"_key"],[161,19,150,21],[161,24,150,26,"key"],[161,27,150,29],[161,29,150,31],[162,8,151,12],[162,12,151,16],[162,13,151,17,"_errorCallback"],[162,27,151,31],[162,28,151,32,"error"],[162,33,151,37],[162,34,151,38],[163,6,152,8],[164,4,153,4],[164,5,153,5],[165,4,154,4],[166,4,155,4,"_subscribeToNativeEvents"],[166,28,155,28,"_subscribeToNativeEvents"],[166,29,155,28],[166,31,155,31],[167,6,156,8],[167,10,156,12],[167,14,156,16],[167,15,156,17,"_loaded"],[167,22,156,24],[167,24,156,26],[168,8,157,12],[168,12,157,16],[168,13,157,17,"_subscriptions"],[168,27,157,31],[168,28,157,32,"push"],[168,32,157,36],[168,33,157,37],[168,37,157,41],[168,38,157,42,"_eventEmitter"],[168,51,157,55],[168,52,157,56,"addListener"],[168,63,157,67],[168,64,157,68],[168,89,157,93],[168,91,157,95],[168,95,157,99],[168,96,157,100,"_internalStatusUpdateCallback"],[168,125,157,129],[168,126,157,130],[168,128,157,132],[168,132,157,136],[168,133,157,137,"_eventEmitter"],[168,146,157,150],[168,147,157,151,"addListener"],[168,158,157,162],[168,159,157,163],[168,178,157,182],[168,180,157,184],[168,184,157,188],[168,185,157,189,"_internalMetadataUpdateCallback"],[168,216,157,220],[168,217,157,221],[168,218,157,222],[169,8,158,12],[169,12,158,16],[169,13,158,17,"_subscriptions"],[169,27,158,31],[169,28,158,32,"push"],[169,32,158,36],[169,33,158,37],[169,37,158,41],[169,38,158,42,"_eventEmitter"],[169,51,158,55],[169,52,158,56,"addListener"],[169,63,158,67],[169,64,158,68],[169,84,158,88],[169,86,158,90],[169,90,158,94],[169,91,158,95,"_internalErrorCallback"],[169,113,158,117],[169,114,158,118],[169,115,158,119],[170,6,159,8],[171,4,160,4],[172,4,161,4,"_clearSubscriptions"],[172,23,161,23,"_clearSubscriptions"],[172,24,161,23],[172,26,161,26],[173,6,162,8],[173,10,162,12],[173,11,162,13,"_subscriptions"],[173,25,162,27],[173,26,162,28,"forEach"],[173,33,162,35],[173,34,162,37,"e"],[173,35,162,38],[173,39,162,43,"e"],[173,40,162,44],[173,41,162,45,"remove"],[173,47,162,51],[173,48,162,52],[173,49,162,53],[173,50,162,54],[174,6,163,8],[174,10,163,12],[174,11,163,13,"_subscriptions"],[174,25,163,27],[174,28,163,30],[174,30,163,32],[175,4,164,4],[176,4,165,4,"_errorCallback"],[176,18,165,18],[176,21,165,22,"error"],[176,26,165,27],[176,30,165,32],[177,6,166,8],[177,10,166,12],[177,11,166,13,"_clearSubscriptions"],[177,30,166,32],[177,31,166,33],[177,32,166,34],[178,6,167,8],[178,10,167,12],[178,11,167,13,"_loaded"],[178,18,167,20],[178,21,167,23],[178,26,167,28],[179,6,168,8],[179,10,168,12],[179,11,168,13,"_key"],[179,15,168,17],[179,18,168,20],[179,22,168,24],[180,6,169,8],[180,10,169,12],[180,11,169,13,"_callOnPlaybackStatusUpdateForNewStatus"],[180,50,169,52],[180,51,169,53],[180,55,169,53,"getUnloadedStatus"],[180,76,169,70],[180,78,169,71,"error"],[180,83,169,76],[180,84,169,77],[180,85,169,78],[181,4,170,4],[181,5,170,5],[182,4,171,4],[183,4,172,4],[184,4,173,4],[185,4,174,4,"getStatusAsync"],[185,18,174,18],[185,21,174,21],[185,27,174,21,"getStatusAsync"],[185,28,174,21],[185,33,174,33],[186,6,175,8],[186,10,175,12],[186,14,175,16],[186,15,175,17,"_loaded"],[186,22,175,24],[186,24,175,26],[187,8,176,12],[187,15,176,19],[187,19,176,23],[187,20,176,24,"_performOperationAndHandleStatusAsync"],[187,57,176,61],[187,58,176,62],[187,64,176,68,"ExponentAV"],[187,83,176,78],[187,84,176,79,"getStatusForSound"],[187,101,176,96],[187,102,176,97],[187,106,176,101],[187,107,176,102,"_key"],[187,111,176,106],[187,112,176,107],[187,113,176,108],[188,6,177,8],[189,6,178,8],[189,12,178,14,"status"],[189,18,178,20],[189,21,178,23],[189,25,178,23,"getUnloadedStatus"],[189,46,178,40],[189,48,178,41],[189,49,178,42],[190,6,179,8],[190,10,179,12],[190,11,179,13,"_callOnPlaybackStatusUpdateForNewStatus"],[190,50,179,52],[190,51,179,53,"status"],[190,57,179,59],[190,58,179,60],[191,6,180,8],[191,13,180,15,"status"],[191,19,180,21],[192,4,181,4],[192,5,181,5],[193,4,182,4],[194,0,183,0],[195,0,184,0],[196,0,185,0],[197,0,186,0],[198,0,187,0],[199,0,188,0],[200,0,189,0],[201,0,190,0],[202,0,191,0],[203,0,192,0],[204,0,193,0],[205,4,194,4,"setOnPlaybackStatusUpdate"],[205,29,194,29,"setOnPlaybackStatusUpdate"],[205,30,194,30,"onPlaybackStatusUpdate"],[205,52,194,52],[205,54,194,54],[206,6,195,8],[206,10,195,12],[206,11,195,13,"_onPlaybackStatusUpdate"],[206,34,195,36],[206,37,195,39,"onPlaybackStatusUpdate"],[206,59,195,61],[207,6,196,8],[207,10,196,12],[207,11,196,13,"getStatusAsync"],[207,25,196,27],[207,26,196,28],[207,27,196,29],[208,4,197,4],[209,4,198,4],[210,0,199,0],[211,0,200,0],[212,0,201,0],[213,0,202,0],[214,4,203,4,"setOnMetadataUpdate"],[214,23,203,23,"setOnMetadataUpdate"],[214,24,203,24,"onMetadataUpdate"],[214,40,203,40],[214,42,203,42],[215,6,204,8],[215,10,204,12],[215,11,204,13,"_onMetadataUpdate"],[215,28,204,30],[215,31,204,33,"onMetadataUpdate"],[215,47,204,49],[216,4,205,4],[217,4,206,4],[218,0,207,0],[219,0,208,0],[220,0,209,0],[221,4,210,4,"setOnAudioSampleReceived"],[221,28,210,28,"setOnAudioSampleReceived"],[221,29,210,29,"callback"],[221,37,210,37],[221,39,210,39],[222,6,211,8],[222,10,211,12],[222,11,211,13,"_onAudioSampleReceived"],[222,33,211,35],[222,36,211,38,"callback"],[222,44,211,46],[223,6,212,8],[223,10,212,12],[223,14,212,16],[223,15,212,17,"_key"],[223,19,212,21],[223,23,212,25],[223,27,212,29],[223,29,212,31],[224,8,213,12],[224,12,213,16],[224,13,213,17,"_updateAudioSampleReceivedCallback"],[224,47,213,51],[224,48,213,52],[224,49,213,53],[225,6,214,8],[226,4,215,4],[227,4,216,4],[228,4,217,4],[228,10,217,10,"loadAsync"],[228,19,217,19,"loadAsync"],[228,20,217,20,"source"],[228,26,217,26],[228,28,217,28,"initialStatus"],[228,41,217,41],[228,44,217,44],[228,45,217,45],[228,46,217,46],[228,48,217,48,"downloadFirst"],[228,61,217,61],[228,64,217,64],[228,68,217,68],[228,70,217,70],[229,6,218,8],[229,10,218,8,"throwIfAudioIsDisabled"],[229,51,218,30],[229,53,218,31],[229,54,218,32],[230,6,219,8],[230,10,219,12],[230,14,219,16],[230,15,219,17,"_loading"],[230,23,219,25],[230,25,219,27],[231,8,220,12],[231,14,220,18],[231,18,220,22,"Error"],[231,23,220,27],[231,24,220,28],[231,55,220,59],[231,56,220,60],[232,6,221,8],[233,6,222,8],[233,10,222,12],[233,11,222,13],[233,15,222,17],[233,16,222,18,"_loaded"],[233,23,222,25],[233,25,222,27],[234,8,223,12],[234,12,223,16],[234,13,223,17,"_loading"],[234,21,223,25],[234,24,223,28],[234,28,223,32],[235,8,224,12],[235,14,224,18],[236,10,224,20,"nativeSource"],[236,22,224,32],[237,10,224,34,"fullInitialStatus"],[238,8,224,52],[238,9,224,53],[238,12,224,56],[238,18,224,62],[238,22,224,62,"getNativeSourceAndFullInitialStatusForLoadAsync"],[238,73,224,109],[238,75,224,110,"source"],[238,81,224,116],[238,83,224,118,"initialStatus"],[238,96,224,131],[238,98,224,133,"downloadFirst"],[238,111,224,146],[238,112,224,147],[239,8,225,12],[240,8,226,12],[240,15,226,19],[240,19,226,23,"Promise"],[240,26,226,30],[240,27,226,31],[240,28,226,32,"resolve"],[240,35,226,39],[240,37,226,41,"reject"],[240,43,226,47],[240,48,226,52],[241,10,227,16],[241,16,227,22,"loadSuccess"],[241,27,227,33],[241,30,227,37,"result"],[241,36,227,43],[241,40,227,48],[242,12,228,20],[242,18,228,26],[242,19,228,27,"key"],[242,22,228,30],[242,24,228,32,"status"],[242,30,228,38],[242,31,228,39],[242,34,228,42,"result"],[242,40,228,48],[243,12,229,20],[243,16,229,24],[243,17,229,25,"_key"],[243,21,229,29],[243,24,229,32,"key"],[243,27,229,35],[244,12,230,20],[244,16,230,24],[244,17,230,25,"_loaded"],[244,24,230,32],[244,27,230,35],[244,31,230,39],[245,12,231,20],[245,16,231,24],[245,17,231,25,"_loading"],[245,25,231,33],[245,28,231,36],[245,33,231,41],[246,12,232,20],[246,16,232,24],[246,17,232,25,"_subscribeToNativeEvents"],[246,41,232,49],[246,42,232,50],[246,43,232,51],[247,12,233,20],[247,16,233,24],[247,17,233,25,"_callOnPlaybackStatusUpdateForNewStatus"],[247,56,233,64],[247,57,233,65,"status"],[247,63,233,71],[247,64,233,72],[248,12,234,20,"resolve"],[248,19,234,27],[248,20,234,28,"status"],[248,26,234,34],[248,27,234,35],[249,10,235,16],[249,11,235,17],[250,10,236,16],[250,16,236,22,"loadError"],[250,25,236,31],[250,28,236,35,"error"],[250,33,236,40],[250,37,236,45],[251,12,237,20],[251,16,237,24],[251,17,237,25,"_loading"],[251,25,237,33],[251,28,237,36],[251,33,237,41],[252,12,238,20,"reject"],[252,18,238,26],[252,19,238,27,"error"],[252,24,238,32],[252,25,238,33],[253,10,239,16],[253,11,239,17],[254,10,240,16,"ExponentAV"],[254,29,240,26],[254,30,240,27,"loadForSound"],[254,42,240,39],[254,43,240,40,"nativeSource"],[254,55,240,52],[254,57,240,54,"fullInitialStatus"],[254,74,240,71],[254,75,240,72],[254,76,240,73,"then"],[254,80,240,77],[254,81,240,78,"loadSuccess"],[254,92,240,89],[254,93,240,90],[254,94,240,91,"catch"],[254,99,240,96],[254,100,240,97,"loadError"],[254,109,240,106],[254,110,240,107],[255,8,241,12],[255,9,241,13],[255,10,241,14],[256,6,242,8],[256,7,242,9],[256,13,243,13],[257,8,244,12],[257,14,244,18],[257,18,244,22,"Error"],[257,23,244,27],[257,24,244,28],[257,54,244,58],[257,55,244,59],[258,6,245,8],[259,4,246,4],[260,4,247,4],[260,10,247,10,"unloadAsync"],[260,21,247,21,"unloadAsync"],[260,22,247,21],[260,24,247,24],[261,6,248,8],[261,10,248,12],[261,14,248,16],[261,15,248,17,"_loaded"],[261,22,248,24],[261,24,248,26],[262,8,249,12],[262,12,249,16],[262,13,249,17,"_loaded"],[262,20,249,24],[262,23,249,27],[262,28,249,32],[263,8,250,12],[263,14,250,18,"key"],[263,17,250,21],[263,20,250,24],[263,24,250,28],[263,25,250,29,"_key"],[263,29,250,33],[264,8,251,12],[264,12,251,16],[264,13,251,17,"_key"],[264,17,251,21],[264,20,251,24],[264,24,251,28],[265,8,252,12],[265,14,252,18,"status"],[265,20,252,24],[265,23,252,27],[265,29,252,33,"ExponentAV"],[265,48,252,43],[265,49,252,44,"unloadForSound"],[265,63,252,58],[265,64,252,59,"key"],[265,67,252,62],[265,68,252,63],[266,8,253,12],[266,12,253,16],[266,13,253,17,"_callOnPlaybackStatusUpdateForNewStatus"],[266,52,253,56],[266,53,253,57,"status"],[266,59,253,63],[266,60,253,64],[267,8,254,12],[267,12,254,16],[267,13,254,17,"_clearSubscriptions"],[267,32,254,36],[267,33,254,37],[267,34,254,38],[268,8,255,12],[268,15,255,19,"status"],[268,21,255,25],[269,6,256,8],[269,7,256,9],[269,13,257,13],[270,8,258,12],[270,15,258,19],[270,19,258,23],[270,20,258,24,"getStatusAsync"],[270,34,258,38],[270,35,258,39],[270,36,258,40],[270,37,258,41],[270,38,258,42],[271,6,259,8],[272,4,260,4],[273,4,261,4],[274,4,262,4],[274,10,262,10,"setStatusAsync"],[274,24,262,24,"setStatusAsync"],[274,25,262,25,"status"],[274,31,262,31],[274,33,262,33],[275,6,263,8],[275,10,263,8,"assertStatusValuesInBounds"],[275,40,263,34],[275,42,263,35,"status"],[275,48,263,41],[275,49,263,42],[276,6,264,8],[276,13,264,15],[276,17,264,19],[276,18,264,20,"_performOperationAndHandleStatusAsync"],[276,55,264,57],[276,56,264,58],[276,62,264,64,"ExponentAV"],[276,81,264,74],[276,82,264,75,"setStatusForSound"],[276,99,264,92],[276,100,264,93],[276,104,264,97],[276,105,264,98,"_key"],[276,109,264,102],[276,111,264,104,"status"],[276,117,264,110],[276,118,264,111],[276,119,264,112],[277,4,265,4],[278,4,266,4],[278,10,266,10,"replayAsync"],[278,21,266,21,"replayAsync"],[278,22,266,22,"status"],[278,28,266,28],[278,31,266,31],[278,32,266,32],[278,33,266,33],[278,35,266,35],[279,6,267,8],[279,10,267,12,"status"],[279,16,267,18],[279,17,267,19,"positionMillis"],[279,31,267,33],[279,35,267,37,"status"],[279,41,267,43],[279,42,267,44,"positionMillis"],[279,56,267,58],[279,61,267,63],[279,62,267,64],[279,64,267,66],[280,8,268,12],[280,14,268,18],[280,18,268,22,"Error"],[280,23,268,27],[280,24,268,28],[280,70,268,74],[280,71,268,75],[281,6,269,8],[282,6,270,8],[282,13,270,15],[282,17,270,19],[282,18,270,20,"_performOperationAndHandleStatusAsync"],[282,55,270,57],[282,56,270,58],[282,62,270,64,"ExponentAV"],[282,81,270,74],[282,82,270,75,"replaySound"],[282,93,270,86],[282,94,270,87],[282,98,270,91],[282,99,270,92,"_key"],[282,103,270,96],[282,105,270,98],[283,8,271,12],[283,11,271,15,"status"],[283,17,271,21],[284,8,272,12,"positionMillis"],[284,22,272,26],[284,24,272,28],[284,25,272,29],[285,8,273,12,"shouldPlay"],[285,18,273,22],[285,20,273,24],[286,6,274,8],[286,7,274,9],[286,8,274,10],[286,9,274,11],[287,4,275,4],[288,4,276,4],[289,2,287,0],[290,2,287,1,"exports"],[290,9,287,1],[290,10,287,1,"Sound"],[290,15,287,1],[290,18,287,1,"Sound"],[290,23,287,1],[291,2,288,0,"Object"],[291,8,288,6],[291,9,288,7,"assign"],[291,15,288,13],[291,16,288,14,"Sound"],[291,21,288,19],[291,22,288,20,"prototype"],[291,31,288,29],[291,33,288,31,"PlaybackMixin"],[291,50,288,44],[291,51,288,45],[292,0,288,46],[292,3]],"functionMap":{"names":["<global>","Sound","create","createAsync","_callOnPlaybackStatusUpdateForNewStatus","_performOperationAndHandleStatusAsync","_updateAudioSampleReceivedCallback","_internalStatusUpdateCallback","_internalMetadataUpdateCallback","_internalErrorCallback","_subscribeToNativeEvents","_clearSubscriptions","_subscriptions.forEach$argument_0","_errorCallback","getStatusAsync","_performOperationAndHandleStatusAsync$argument_0","setOnPlaybackStatusUpdate","setOnMetadataUpdate","setOnAudioSampleReceived","loadAsync","Promise$argument_0","loadSuccess","loadError","unloadAsync","setStatusAsync","replayAsync"],"mappings":"AAA;OC4B;oBCa;KDG;yBE6C;KFK;IGE;KHS;IIC;KJU;IKC;KLoB;oCMC;KNI;sCOC;KPI;6BQC;KRI;ISE;KTK;IUC;oCCC,iBD;KVE;qBYC;KZK;qBaI;8DCE,6CD;KbK;Iea;KfG;IgBM;KhBE;IiBK;KjBK;IkBE;+BCS;oCCC;iBDQ;kCEC;iBFG;aDE;KlBK;IsBC;KtBa;IuBE;0DTE,qDS;KvBC;IwBC;0DVI;UUI;KxBC;CDY"}},"type":"js/module"}]}