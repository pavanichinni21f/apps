{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":106,"index":106}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./AudioAvailability","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":107},"end":{"line":2,"column":77,"index":184}}],"key":"bSBjZOQMb5YC9PXMSfyUskC29qA=","exportNames":["*"]}},{"name":"./RecordingConstants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":185},"end":{"line":3,"column":63,"index":248}}],"key":"I+7uSAstO8eEOs35HbXycwhHsmk=","exportNames":["*"]}},{"name":"./Sound","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":249},"end":{"line":4,"column":32,"index":281}}],"key":"/AmsCczpb+cEWj52kLwrv57uCLQ=","exportNames":["*"]}},{"name":"../AV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":282},"end":{"line":5,"column":66,"index":348}}],"key":"CKKx7GRKZ+dPvq8Nb7FmQZUl2kI=","exportNames":["*"]}},{"name":"../ExponentAV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":349},"end":{"line":6,"column":39,"index":388}}],"key":"EFxOD5hqmWNncIOpuO+BTl9k+bk=","exportNames":["*"]}},{"name":"./Recording.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":405,"column":0,"index":18427},"end":{"line":405,"column":34,"index":18461}}],"key":"naz3Z70IbfNhaPL9MpXy4n4698o=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var _exportNames = {\n    getPermissionsAsync: true,\n    requestPermissionsAsync: true,\n    usePermissions: true,\n    Recording: true,\n    PermissionStatus: true\n  };\n  Object.defineProperty(exports, \"PermissionStatus\", {\n    enumerable: true,\n    get: function () {\n      return _expoModulesCore.PermissionStatus;\n    }\n  });\n  exports.Recording = void 0;\n  exports.getPermissionsAsync = getPermissionsAsync;\n  exports.requestPermissionsAsync = requestPermissionsAsync;\n  exports.usePermissions = void 0;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _AudioAvailability = require(_dependencyMap[2], \"./AudioAvailability\");\n  var _RecordingConstants = require(_dependencyMap[3], \"./RecordingConstants\");\n  Object.keys(_RecordingConstants).forEach(function (key) {\n    if (key === \"default\" || key === \"__esModule\") return;\n    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n    if (key in exports && exports[key] === _RecordingConstants[key]) return;\n    Object.defineProperty(exports, key, {\n      enumerable: true,\n      get: function () {\n        return _RecordingConstants[key];\n      }\n    });\n  });\n  var _Sound = require(_dependencyMap[4], \"./Sound\");\n  var _AV = require(_dependencyMap[5], \"../AV\");\n  var _ExponentAV = _interopRequireDefault(require(_dependencyMap[6], \"../ExponentAV\"));\n  var _Recording = require(_dependencyMap[7], \"./Recording.types\");\n  Object.keys(_Recording).forEach(function (key) {\n    if (key === \"default\" || key === \"__esModule\") return;\n    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n    if (key in exports && exports[key] === _Recording[key]) return;\n    Object.defineProperty(exports, key, {\n      enumerable: true,\n      get: function () {\n        return _Recording[key];\n      }\n    });\n  });\n  let _recorderExists = false;\n  const eventEmitter = _expoModulesCore.Platform.OS === 'android' ? new _expoModulesCore.LegacyEventEmitter(_ExponentAV.default) : null;\n  /**\n   * Checks user's permissions for audio recording.\n   * @return A promise that resolves to an object of type `PermissionResponse`.\n   * @platform android\n   * @platform ios\n   */\n  async function getPermissionsAsync() {\n    return _ExponentAV.default.getPermissionsAsync();\n  }\n  /**\n   * Asks the user to grant permissions for audio recording.\n   * @return A promise that resolves to an object of type `PermissionResponse`.\n   * @platform android\n   * @platform ios\n   */\n  async function requestPermissionsAsync() {\n    return _ExponentAV.default.requestPermissionsAsync();\n  }\n  /**\n   * Check or request permissions to record audio.\n   * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [permissionResponse, requestPermission] = Audio.usePermissions();\n   * ```\n   */\n  const usePermissions = exports.usePermissions = (0, _expoModulesCore.createPermissionHook)({\n    getMethod: getPermissionsAsync,\n    requestMethod: requestPermissionsAsync\n  });\n  // @needsAudit\n  /**\n   * > **warning** **Warning**: Experimental for web.\n   *\n   * This class represents an audio recording. After creating an instance of this class, `prepareToRecordAsync`\n   * must be called in order to record audio. Once recording is finished, call `stopAndUnloadAsync`. Note that\n   * only one recorder is allowed to exist in the state between `prepareToRecordAsync` and `stopAndUnloadAsync`\n   * at any given time.\n   *\n   * Note that your experience must request audio recording permissions in order for recording to function.\n   * See the [`Permissions` module](/guides/permissions) for more details.\n   *\n   * Additionally, audio recording is [not supported in the iOS Simulator](/workflow/ios-simulator/#limitations).\n   *\n   * @example\n   * ```ts\n   * const recording = new Audio.Recording();\n   * try {\n   *   await recording.prepareToRecordAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY);\n   *   await recording.startAsync();\n   *   // You are now recording!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A newly constructed instance of `Audio.Recording`.\n   * @platform android\n   * @platform ios\n   */\n  class Recording {\n    _subscription = null;\n    _canRecord = false;\n    _isDoneRecording = false;\n    _finalDurationMillis = 0;\n    _uri = null;\n    _onRecordingStatusUpdate = null;\n    _progressUpdateTimeoutVariable = null;\n    _progressUpdateIntervalMillis = _AV._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n    _options = null;\n    // Internal methods\n    _cleanupForUnloadedRecorder = async finalStatus => {\n      this._canRecord = false;\n      this._isDoneRecording = true;\n      this._finalDurationMillis = finalStatus?.durationMillis ?? 0;\n      _recorderExists = false;\n      if (this._subscription) {\n        this._subscription.remove();\n        this._subscription = null;\n      }\n      this._disablePolling();\n      return await this.getStatusAsync(); // Automatically calls onRecordingStatusUpdate for the final state.\n    };\n    _pollingLoop = async () => {\n      if ((0, _AudioAvailability.isAudioEnabled)() && this._canRecord && this._onRecordingStatusUpdate != null) {\n        this._progressUpdateTimeoutVariable = setTimeout(this._pollingLoop, this._progressUpdateIntervalMillis);\n        try {\n          await this.getStatusAsync();\n        } catch {\n          this._disablePolling();\n        }\n      }\n    };\n    _disablePolling() {\n      if (this._progressUpdateTimeoutVariable != null) {\n        clearTimeout(this._progressUpdateTimeoutVariable);\n        this._progressUpdateTimeoutVariable = null;\n      }\n    }\n    _enablePollingIfNecessaryAndPossible() {\n      if ((0, _AudioAvailability.isAudioEnabled)() && this._canRecord && this._onRecordingStatusUpdate != null) {\n        this._disablePolling();\n        this._pollingLoop();\n      }\n    }\n    _callOnRecordingStatusUpdateForNewStatus(status) {\n      if (this._onRecordingStatusUpdate != null) {\n        this._onRecordingStatusUpdate(status);\n      }\n    }\n    async _performOperationAndHandleStatusAsync(operation) {\n      (0, _AudioAvailability.throwIfAudioIsDisabled)();\n      if (this._canRecord) {\n        const status = await operation();\n        this._callOnRecordingStatusUpdateForNewStatus(status);\n        return status;\n      } else {\n        throw new Error('Cannot complete operation because this recorder is not ready to record.');\n      }\n    }\n    /**\n     * Creates and starts a recording using the given options, with optional `onRecordingStatusUpdate` and `progressUpdateIntervalMillis`.\n     *\n     * ```ts\n     * const { recording, status } = await Audio.Recording.createAsync(\n     *   options,\n     *   onRecordingStatusUpdate,\n     *   progressUpdateIntervalMillis\n     * );\n     *\n     * // Which is equivalent to the following:\n     * const recording = new Audio.Recording();\n     * await recording.prepareToRecordAsync(options);\n     * recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n     * await recording.startAsync();\n     * ```\n     *\n     * @param options Options for the recording, including sample rate, bitrate, channels, format, encoder, and extension. If no options are passed to,\n     * the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`. See below for details on `RecordingOptions`.\n     * @param onRecordingStatusUpdate A function taking a single parameter `status` (a dictionary, described in `getStatusAsync`).\n     * @param progressUpdateIntervalMillis The interval between calls of `onRecordingStatusUpdate`. This value defaults to 500 milliseconds.\n     *\n     * @example\n     * ```ts\n     * try {\n     *   const { recording: recordingObject, status } = await Audio.Recording.createAsync(\n     *     Audio.RecordingOptionsPresets.HIGH_QUALITY\n     *   );\n     *   // You are now recording!\n     * } catch (error) {\n     *   // An error occurred!\n     * }\n     * ```\n     *\n     * @return A `Promise` that is rejected if creation failed, or fulfilled with the following dictionary if creation succeeded.\n     */\n    static createAsync = async (options = _RecordingConstants.RecordingOptionsPresets.LOW_QUALITY, onRecordingStatusUpdate = null, progressUpdateIntervalMillis = null) => {\n      const recording = new Recording();\n      if (progressUpdateIntervalMillis) {\n        recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n      }\n      recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n      await recording.prepareToRecordAsync({\n        ...options,\n        keepAudioActiveHint: true\n      });\n      try {\n        const status = await recording.startAsync();\n        return {\n          recording,\n          status\n        };\n      } catch (err) {\n        recording.stopAndUnloadAsync().catch(_e => {\n          // Since there was an issue with starting, when trying calling stopAndUnloadAsync\n          // the promise is rejected which is unhandled\n          // lets catch it since its expected\n        });\n        throw err;\n      }\n    };\n    // Get status API\n    /**\n     * Gets the `status` of the `Recording`.\n     * @return A `Promise` that is resolved with the `RecordingStatus` object.\n     */\n    getStatusAsync = async () => {\n      // Automatically calls onRecordingStatusUpdate.\n      if (this._canRecord) {\n        return this._performOperationAndHandleStatusAsync(() => _ExponentAV.default.getAudioRecordingStatus());\n      }\n      const status = {\n        canRecord: false,\n        isRecording: false,\n        isDoneRecording: this._isDoneRecording,\n        durationMillis: this._finalDurationMillis\n      };\n      this._callOnRecordingStatusUpdateForNewStatus(status);\n      return status;\n    };\n    /**\n     * Sets a function to be called regularly with the `RecordingStatus` of the `Recording`.\n     *\n     * `onRecordingStatusUpdate` will be called when another call to the API for this recording completes (such as `prepareToRecordAsync()`,\n     * `startAsync()`, `getStatusAsync()`, or `stopAndUnloadAsync()`), and will also be called at regular intervals while the recording can record.\n     * Call `setProgressUpdateInterval()` to modify the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n     *\n     * @param onRecordingStatusUpdate A function taking a single parameter `RecordingStatus`.\n     */\n    setOnRecordingStatusUpdate(onRecordingStatusUpdate) {\n      this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n      if (onRecordingStatusUpdate == null) {\n        this._disablePolling();\n      } else {\n        this._enablePollingIfNecessaryAndPossible();\n      }\n      this.getStatusAsync();\n    }\n    /**\n     * Sets the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n     * See `setOnRecordingStatusUpdate` for details. This value defaults to 500 milliseconds.\n     * @param progressUpdateIntervalMillis The new interval between calls of `onRecordingStatusUpdate`.\n     */\n    setProgressUpdateInterval(progressUpdateIntervalMillis) {\n      this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n      this.getStatusAsync();\n    }\n    // Record API\n    /**\n     * Loads the recorder into memory and prepares it for recording. This must be called before calling `startAsync()`.\n     * This method can only be called if the `Recording` instance has never yet been prepared.\n     *\n     * @param options `RecordingOptions` for the recording, including sample rate, bitrate, channels, format, encoder, and extension.\n     * If no options are passed to `prepareToRecordAsync()`, the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`.\n     *\n     * @return A `Promise` that is fulfilled when the recorder is loaded and prepared, or rejects if this failed. If another `Recording` exists\n     * in your experience that is currently prepared to record, the `Promise` will reject. If the `RecordingOptions` provided are invalid,\n     * the `Promise` will also reject. The promise is resolved with the `RecordingStatus` of the recording.\n     */\n    async prepareToRecordAsync(options = _RecordingConstants.RecordingOptionsPresets.LOW_QUALITY) {\n      (0, _AudioAvailability.throwIfAudioIsDisabled)();\n      if (_recorderExists) {\n        throw new Error('Only one Recording object can be prepared at a given time.');\n      }\n      if (this._isDoneRecording) {\n        throw new Error('This Recording object is done recording; you must make a new one.');\n      }\n      if (!options || !options.android || !options.ios) {\n        throw new Error('You must provide recording options for android and ios in order to prepare to record.');\n      }\n      const extensionRegex = /^\\.\\w+$/;\n      if (!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension)) {\n        throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);\n      }\n      if (!this._canRecord) {\n        if (eventEmitter) {\n          this._subscription = eventEmitter.addListener('Expo.Recording.recorderUnloaded', this._cleanupForUnloadedRecorder);\n        }\n        const {\n          uri,\n          status\n        } = await _ExponentAV.default.prepareAudioRecorder(options);\n        _recorderExists = true;\n        this._uri = uri;\n        this._options = options;\n        this._canRecord = true;\n        const currentStatus = {\n          ...status,\n          canRecord: true\n        };\n        this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n        this._enablePollingIfNecessaryAndPossible();\n        return currentStatus;\n      } else {\n        throw new Error('This Recording object is already prepared to record.');\n      }\n    }\n    /**\n     * Returns a list of available recording inputs. This method can only be called if the `Recording` has been prepared.\n     * @return A `Promise` that is fulfilled with an array of `RecordingInput` objects.\n     */\n    async getAvailableInputs() {\n      return _ExponentAV.default.getAvailableInputs();\n    }\n    /**\n     * Returns the currently-selected recording input. This method can only be called if the `Recording` has been prepared.\n     * @return A `Promise` that is fulfilled with a `RecordingInput` object.\n     */\n    async getCurrentInput() {\n      return _ExponentAV.default.getCurrentInput();\n    }\n    /**\n     * Sets the current recording input.\n     * @param inputUid The uid of a `RecordingInput`.\n     * @return A `Promise` that is resolved if successful or rejected if not.\n     */\n    async setInput(inputUid) {\n      return _ExponentAV.default.setInput(inputUid);\n    }\n    /**\n     * Begins recording. This method can only be called if the `Recording` has been prepared.\n     * @return A `Promise` that is fulfilled when recording has begun, or rejects if recording could not be started.\n     * The promise is resolved with the `RecordingStatus` of the recording.\n     */\n    async startAsync() {\n      return this._performOperationAndHandleStatusAsync(() => _ExponentAV.default.startAudioRecording());\n    }\n    /**\n     * Pauses recording. This method can only be called if the `Recording` has been prepared.\n     *\n     * > This is only available on Android API version 24 and later.\n     *\n     * @return A `Promise` that is fulfilled when recording has paused, or rejects if recording could not be paused.\n     * If the Android API version is less than 24, the `Promise` will reject. The promise is resolved with the\n     * `RecordingStatus` of the recording.\n     */\n    async pauseAsync() {\n      return this._performOperationAndHandleStatusAsync(() => _ExponentAV.default.pauseAudioRecording());\n    }\n    /**\n     * Stops the recording and deallocates the recorder from memory. This reverts the `Recording` instance\n     * to an unprepared state, and another `Recording` instance must be created in order to record again.\n     * This method can only be called if the `Recording` has been prepared.\n     *\n     * > On Android this method may fail with `E_AUDIO_NODATA` when called too soon after `startAsync` and\n     * > no audio data has been recorded yet. In that case the recorded file will be invalid and should be discarded.\n     *\n     * @return A `Promise` that is fulfilled when recording has stopped, or rejects if recording could not be stopped.\n     * The promise is resolved with the `RecordingStatus` of the recording.\n     */\n    async stopAndUnloadAsync() {\n      if (!this._canRecord) {\n        if (this._isDoneRecording) {\n          throw new Error('Cannot unload a Recording that has already been unloaded.');\n        } else {\n          throw new Error('Cannot unload a Recording that has not been prepared.');\n        }\n      }\n      // We perform a separate native API call so that the state of the Recording can be updated with\n      // the final duration of the recording. (We cast stopStatus as Object to appease Flow)\n      let stopResult;\n      let stopError;\n      try {\n        stopResult = await _ExponentAV.default.stopAudioRecording();\n      } catch (err) {\n        stopError = err;\n      }\n      // Web has to return the URI at the end of recording, so needs a little destructuring\n      if (_expoModulesCore.Platform.OS === 'web' && stopResult?.uri !== undefined) {\n        this._uri = stopResult.uri;\n      }\n      // Clean-up and return status\n      await _ExponentAV.default.unloadAudioRecorder();\n      const status = await this._cleanupForUnloadedRecorder(stopResult);\n      return stopError ? Promise.reject(stopError) : status;\n    }\n    // Read API\n    /**\n     * Gets the local URI of the `Recording`. Note that this will only succeed once the `Recording` is prepared\n     * to record. On web, this will not return the URI until the recording is finished.\n     * @return A `string` with the local URI of the `Recording`, or `null` if the `Recording` is not prepared\n     * to record (or, on Web, if the recording has not finished).\n     */\n    getURI() {\n      return this._uri;\n    }\n    /**\n     * @deprecated Use `createNewLoadedSoundAsync()` instead.\n     */\n    async createNewLoadedSound(initialStatus = {}, onPlaybackStatusUpdate = null) {\n      console.warn(`createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`);\n      return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n    }\n    /**\n     * Creates and loads a new `Sound` object to play back the `Recording`. Note that this will only succeed once the `Recording`\n     * is done recording and `stopAndUnloadAsync()` has been called.\n     *\n     * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n     * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet`\n     * and the default initial playback status.\n     * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n     * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n     *\n     * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject`.\n     */\n    async createNewLoadedSoundAsync(initialStatus = {}, onPlaybackStatusUpdate = null) {\n      if (this._uri == null || !this._isDoneRecording) {\n        throw new Error('Cannot create sound when the Recording has not finished!');\n      }\n      return _Sound.Sound.createAsync({\n        uri: this._uri\n      }, initialStatus, onPlaybackStatusUpdate, false);\n    }\n  }\n  exports.Recording = Recording;\n});","lineCount":450,"map":[[23,2,1,0],[23,6,1,0,"_expoModulesCore"],[23,22,1,0],[23,25,1,0,"require"],[23,32,1,0],[23,33,1,0,"_dependencyMap"],[23,47,1,0],[24,2,2,0],[24,6,2,0,"_AudioAvailability"],[24,24,2,0],[24,27,2,0,"require"],[24,34,2,0],[24,35,2,0,"_dependencyMap"],[24,49,2,0],[25,2,3,0],[25,6,3,0,"_RecordingConstants"],[25,25,3,0],[25,28,3,0,"require"],[25,35,3,0],[25,36,3,0,"_dependencyMap"],[25,50,3,0],[26,2,404,0,"Object"],[26,8,404,0],[26,9,404,0,"keys"],[26,13,404,0],[26,14,404,0,"_RecordingConstants"],[26,33,404,0],[26,35,404,0,"forEach"],[26,42,404,0],[26,53,404,0,"key"],[26,56,404,0],[27,4,404,0],[27,8,404,0,"key"],[27,11,404,0],[27,29,404,0,"key"],[27,32,404,0],[28,4,404,0],[28,8,404,0,"Object"],[28,14,404,0],[28,15,404,0,"prototype"],[28,24,404,0],[28,25,404,0,"hasOwnProperty"],[28,39,404,0],[28,40,404,0,"call"],[28,44,404,0],[28,45,404,0,"_exportNames"],[28,57,404,0],[28,59,404,0,"key"],[28,62,404,0],[29,4,404,0],[29,8,404,0,"key"],[29,11,404,0],[29,15,404,0,"exports"],[29,22,404,0],[29,26,404,0,"exports"],[29,33,404,0],[29,34,404,0,"key"],[29,37,404,0],[29,43,404,0,"_RecordingConstants"],[29,62,404,0],[29,63,404,0,"key"],[29,66,404,0],[30,4,404,0,"Object"],[30,10,404,0],[30,11,404,0,"defineProperty"],[30,25,404,0],[30,26,404,0,"exports"],[30,33,404,0],[30,35,404,0,"key"],[30,38,404,0],[31,6,404,0,"enumerable"],[31,16,404,0],[32,6,404,0,"get"],[32,9,404,0],[32,20,404,0,"get"],[32,21,404,0],[33,8,404,0],[33,15,404,0,"_RecordingConstants"],[33,34,404,0],[33,35,404,0,"key"],[33,38,404,0],[34,6,404,0],[35,4,404,0],[36,2,404,0],[37,2,4,0],[37,6,4,0,"_Sound"],[37,12,4,0],[37,15,4,0,"require"],[37,22,4,0],[37,23,4,0,"_dependencyMap"],[37,37,4,0],[38,2,5,0],[38,6,5,0,"_AV"],[38,9,5,0],[38,12,5,0,"require"],[38,19,5,0],[38,20,5,0,"_dependencyMap"],[38,34,5,0],[39,2,6,0],[39,6,6,0,"_ExponentAV"],[39,17,6,0],[39,20,6,0,"_interopRequireDefault"],[39,42,6,0],[39,43,6,0,"require"],[39,50,6,0],[39,51,6,0,"_dependencyMap"],[39,65,6,0],[40,2,405,0],[40,6,405,0,"_Recording"],[40,16,405,0],[40,19,405,0,"require"],[40,26,405,0],[40,27,405,0,"_dependencyMap"],[40,41,405,0],[41,2,405,0,"Object"],[41,8,405,0],[41,9,405,0,"keys"],[41,13,405,0],[41,14,405,0,"_Recording"],[41,24,405,0],[41,26,405,0,"forEach"],[41,33,405,0],[41,44,405,0,"key"],[41,47,405,0],[42,4,405,0],[42,8,405,0,"key"],[42,11,405,0],[42,29,405,0,"key"],[42,32,405,0],[43,4,405,0],[43,8,405,0,"Object"],[43,14,405,0],[43,15,405,0,"prototype"],[43,24,405,0],[43,25,405,0,"hasOwnProperty"],[43,39,405,0],[43,40,405,0,"call"],[43,44,405,0],[43,45,405,0,"_exportNames"],[43,57,405,0],[43,59,405,0,"key"],[43,62,405,0],[44,4,405,0],[44,8,405,0,"key"],[44,11,405,0],[44,15,405,0,"exports"],[44,22,405,0],[44,26,405,0,"exports"],[44,33,405,0],[44,34,405,0,"key"],[44,37,405,0],[44,43,405,0,"_Recording"],[44,53,405,0],[44,54,405,0,"key"],[44,57,405,0],[45,4,405,0,"Object"],[45,10,405,0],[45,11,405,0,"defineProperty"],[45,25,405,0],[45,26,405,0,"exports"],[45,33,405,0],[45,35,405,0,"key"],[45,38,405,0],[46,6,405,0,"enumerable"],[46,16,405,0],[47,6,405,0,"get"],[47,9,405,0],[47,20,405,0,"get"],[47,21,405,0],[48,8,405,0],[48,15,405,0,"_Recording"],[48,25,405,0],[48,26,405,0,"key"],[48,29,405,0],[49,6,405,0],[50,4,405,0],[51,2,405,0],[52,2,7,0],[52,6,7,4,"_recorderExists"],[52,21,7,19],[52,24,7,22],[52,29,7,27],[53,2,8,0],[53,8,8,6,"eventEmitter"],[53,20,8,18],[53,23,8,21,"Platform"],[53,48,8,29],[53,49,8,30,"OS"],[53,51,8,32],[53,56,8,37],[53,65,8,46],[53,68,8,49],[53,72,8,53,"LegacyEventEmitter"],[53,107,8,71],[53,108,8,72,"ExponentAV"],[53,127,8,82],[53,128,8,83],[53,131,8,86],[53,135,8,90],[54,2,9,0],[55,0,10,0],[56,0,11,0],[57,0,12,0],[58,0,13,0],[59,0,14,0],[60,2,15,7],[60,17,15,22,"getPermissionsAsync"],[60,36,15,41,"getPermissionsAsync"],[60,37,15,41],[60,39,15,44],[61,4,16,4],[61,11,16,11,"ExponentAV"],[61,30,16,21],[61,31,16,22,"getPermissionsAsync"],[61,50,16,41],[61,51,16,42],[61,52,16,43],[62,2,17,0],[63,2,18,0],[64,0,19,0],[65,0,20,0],[66,0,21,0],[67,0,22,0],[68,0,23,0],[69,2,24,7],[69,17,24,22,"requestPermissionsAsync"],[69,40,24,45,"requestPermissionsAsync"],[69,41,24,45],[69,43,24,48],[70,4,25,4],[70,11,25,11,"ExponentAV"],[70,30,25,21],[70,31,25,22,"requestPermissionsAsync"],[70,54,25,45],[70,55,25,46],[70,56,25,47],[71,2,26,0],[72,2,27,0],[73,0,28,0],[74,0,29,0],[75,0,30,0],[76,0,31,0],[77,0,32,0],[78,0,33,0],[79,0,34,0],[80,0,35,0],[81,2,36,7],[81,8,36,13,"usePermissions"],[81,22,36,27],[81,25,36,27,"exports"],[81,32,36,27],[81,33,36,27,"usePermissions"],[81,47,36,27],[81,50,36,30],[81,54,36,30,"createPermissionHook"],[81,91,36,50],[81,93,36,51],[82,4,37,4,"getMethod"],[82,13,37,13],[82,15,37,15,"getPermissionsAsync"],[82,34,37,34],[83,4,38,4,"requestMethod"],[83,17,38,17],[83,19,38,19,"requestPermissionsAsync"],[84,2,39,0],[84,3,39,1],[84,4,39,2],[85,2,40,0],[86,2,41,0],[87,0,42,0],[88,0,43,0],[89,0,44,0],[90,0,45,0],[91,0,46,0],[92,0,47,0],[93,0,48,0],[94,0,49,0],[95,0,50,0],[96,0,51,0],[97,0,52,0],[98,0,53,0],[99,0,54,0],[100,0,55,0],[101,0,56,0],[102,0,57,0],[103,0,58,0],[104,0,59,0],[105,0,60,0],[106,0,61,0],[107,0,62,0],[108,0,63,0],[109,0,64,0],[110,0,65,0],[111,0,66,0],[112,0,67,0],[113,0,68,0],[114,0,69,0],[115,2,70,7],[115,8,70,13,"Recording"],[115,17,70,22],[115,18,70,23],[116,4,71,4,"_subscription"],[116,17,71,17],[116,20,71,20],[116,24,71,24],[117,4,72,4,"_canRecord"],[117,14,72,14],[117,17,72,17],[117,22,72,22],[118,4,73,4,"_isDoneRecording"],[118,20,73,20],[118,23,73,23],[118,28,73,28],[119,4,74,4,"_finalDurationMillis"],[119,24,74,24],[119,27,74,27],[119,28,74,28],[120,4,75,4,"_uri"],[120,8,75,8],[120,11,75,11],[120,15,75,15],[121,4,76,4,"_onRecordingStatusUpdate"],[121,28,76,28],[121,31,76,31],[121,35,76,35],[122,4,77,4,"_progressUpdateTimeoutVariable"],[122,34,77,34],[122,37,77,37],[122,41,77,41],[123,4,78,4,"_progressUpdateIntervalMillis"],[123,33,78,33],[123,36,78,36,"_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS"],[123,80,78,76],[124,4,79,4,"_options"],[124,12,79,12],[124,15,79,15],[124,19,79,19],[125,4,80,4],[126,4,81,4,"_cleanupForUnloadedRecorder"],[126,31,81,31],[126,34,81,34],[126,40,81,41,"finalStatus"],[126,51,81,52],[126,55,81,57],[127,6,82,8],[127,10,82,12],[127,11,82,13,"_canRecord"],[127,21,82,23],[127,24,82,26],[127,29,82,31],[128,6,83,8],[128,10,83,12],[128,11,83,13,"_isDoneRecording"],[128,27,83,29],[128,30,83,32],[128,34,83,36],[129,6,84,8],[129,10,84,12],[129,11,84,13,"_finalDurationMillis"],[129,31,84,33],[129,34,84,36,"finalStatus"],[129,45,84,47],[129,47,84,49,"durationMillis"],[129,61,84,63],[129,65,84,67],[129,66,84,68],[130,6,85,8,"_recorderExists"],[130,21,85,23],[130,24,85,26],[130,29,85,31],[131,6,86,8],[131,10,86,12],[131,14,86,16],[131,15,86,17,"_subscription"],[131,28,86,30],[131,30,86,32],[132,8,87,12],[132,12,87,16],[132,13,87,17,"_subscription"],[132,26,87,30],[132,27,87,31,"remove"],[132,33,87,37],[132,34,87,38],[132,35,87,39],[133,8,88,12],[133,12,88,16],[133,13,88,17,"_subscription"],[133,26,88,30],[133,29,88,33],[133,33,88,37],[134,6,89,8],[135,6,90,8],[135,10,90,12],[135,11,90,13,"_disablePolling"],[135,26,90,28],[135,27,90,29],[135,28,90,30],[136,6,91,8],[136,13,91,15],[136,19,91,21],[136,23,91,25],[136,24,91,26,"getStatusAsync"],[136,38,91,40],[136,39,91,41],[136,40,91,42],[136,41,91,43],[136,42,91,44],[137,4,92,4],[137,5,92,5],[138,4,93,4,"_pollingLoop"],[138,16,93,16],[138,19,93,19],[138,25,93,19,"_pollingLoop"],[138,26,93,19],[138,31,93,31],[139,6,94,8],[139,10,94,12],[139,14,94,12,"isAudioEnabled"],[139,47,94,26],[139,49,94,27],[139,50,94,28],[139,54,94,32],[139,58,94,36],[139,59,94,37,"_canRecord"],[139,69,94,47],[139,73,94,51],[139,77,94,55],[139,78,94,56,"_onRecordingStatusUpdate"],[139,102,94,80],[139,106,94,84],[139,110,94,88],[139,112,94,90],[140,8,95,12],[140,12,95,16],[140,13,95,17,"_progressUpdateTimeoutVariable"],[140,43,95,47],[140,46,95,50,"setTimeout"],[140,56,95,60],[140,57,95,61],[140,61,95,65],[140,62,95,66,"_pollingLoop"],[140,74,95,78],[140,76,95,80],[140,80,95,84],[140,81,95,85,"_progressUpdateIntervalMillis"],[140,110,95,114],[140,111,95,115],[141,8,96,12],[141,12,96,16],[142,10,97,16],[142,16,97,22],[142,20,97,26],[142,21,97,27,"getStatusAsync"],[142,35,97,41],[142,36,97,42],[142,37,97,43],[143,8,98,12],[143,9,98,13],[143,10,99,12],[143,16,99,18],[144,10,100,16],[144,14,100,20],[144,15,100,21,"_disablePolling"],[144,30,100,36],[144,31,100,37],[144,32,100,38],[145,8,101,12],[146,6,102,8],[147,4,103,4],[147,5,103,5],[148,4,104,4,"_disablePolling"],[148,19,104,19,"_disablePolling"],[148,20,104,19],[148,22,104,22],[149,6,105,8],[149,10,105,12],[149,14,105,16],[149,15,105,17,"_progressUpdateTimeoutVariable"],[149,45,105,47],[149,49,105,51],[149,53,105,55],[149,55,105,57],[150,8,106,12,"clearTimeout"],[150,20,106,24],[150,21,106,25],[150,25,106,29],[150,26,106,30,"_progressUpdateTimeoutVariable"],[150,56,106,60],[150,57,106,61],[151,8,107,12],[151,12,107,16],[151,13,107,17,"_progressUpdateTimeoutVariable"],[151,43,107,47],[151,46,107,50],[151,50,107,54],[152,6,108,8],[153,4,109,4],[154,4,110,4,"_enablePollingIfNecessaryAndPossible"],[154,40,110,40,"_enablePollingIfNecessaryAndPossible"],[154,41,110,40],[154,43,110,43],[155,6,111,8],[155,10,111,12],[155,14,111,12,"isAudioEnabled"],[155,47,111,26],[155,49,111,27],[155,50,111,28],[155,54,111,32],[155,58,111,36],[155,59,111,37,"_canRecord"],[155,69,111,47],[155,73,111,51],[155,77,111,55],[155,78,111,56,"_onRecordingStatusUpdate"],[155,102,111,80],[155,106,111,84],[155,110,111,88],[155,112,111,90],[156,8,112,12],[156,12,112,16],[156,13,112,17,"_disablePolling"],[156,28,112,32],[156,29,112,33],[156,30,112,34],[157,8,113,12],[157,12,113,16],[157,13,113,17,"_pollingLoop"],[157,25,113,29],[157,26,113,30],[157,27,113,31],[158,6,114,8],[159,4,115,4],[160,4,116,4,"_callOnRecordingStatusUpdateForNewStatus"],[160,44,116,44,"_callOnRecordingStatusUpdateForNewStatus"],[160,45,116,45,"status"],[160,51,116,51],[160,53,116,53],[161,6,117,8],[161,10,117,12],[161,14,117,16],[161,15,117,17,"_onRecordingStatusUpdate"],[161,39,117,41],[161,43,117,45],[161,47,117,49],[161,49,117,51],[162,8,118,12],[162,12,118,16],[162,13,118,17,"_onRecordingStatusUpdate"],[162,37,118,41],[162,38,118,42,"status"],[162,44,118,48],[162,45,118,49],[163,6,119,8],[164,4,120,4],[165,4,121,4],[165,10,121,10,"_performOperationAndHandleStatusAsync"],[165,47,121,47,"_performOperationAndHandleStatusAsync"],[165,48,121,48,"operation"],[165,57,121,57],[165,59,121,59],[166,6,122,8],[166,10,122,8,"throwIfAudioIsDisabled"],[166,51,122,30],[166,53,122,31],[166,54,122,32],[167,6,123,8],[167,10,123,12],[167,14,123,16],[167,15,123,17,"_canRecord"],[167,25,123,27],[167,27,123,29],[168,8,124,12],[168,14,124,18,"status"],[168,20,124,24],[168,23,124,27],[168,29,124,33,"operation"],[168,38,124,42],[168,39,124,43],[168,40,124,44],[169,8,125,12],[169,12,125,16],[169,13,125,17,"_callOnRecordingStatusUpdateForNewStatus"],[169,53,125,57],[169,54,125,58,"status"],[169,60,125,64],[169,61,125,65],[170,8,126,12],[170,15,126,19,"status"],[170,21,126,25],[171,6,127,8],[171,7,127,9],[171,13,128,13],[172,8,129,12],[172,14,129,18],[172,18,129,22,"Error"],[172,23,129,27],[172,24,129,28],[172,97,129,101],[172,98,129,102],[173,6,130,8],[174,4,131,4],[175,4,132,4],[176,0,133,0],[177,0,134,0],[178,0,135,0],[179,0,136,0],[180,0,137,0],[181,0,138,0],[182,0,139,0],[183,0,140,0],[184,0,141,0],[185,0,142,0],[186,0,143,0],[187,0,144,0],[188,0,145,0],[189,0,146,0],[190,0,147,0],[191,0,148,0],[192,0,149,0],[193,0,150,0],[194,0,151,0],[195,0,152,0],[196,0,153,0],[197,0,154,0],[198,0,155,0],[199,0,156,0],[200,0,157,0],[201,0,158,0],[202,0,159,0],[203,0,160,0],[204,0,161,0],[205,0,162,0],[206,0,163,0],[207,0,164,0],[208,0,165,0],[209,0,166,0],[210,0,167,0],[211,4,168,4],[211,11,168,11,"createAsync"],[211,22,168,22],[211,25,168,25],[211,31,168,25,"createAsync"],[211,32,168,32,"options"],[211,39,168,39],[211,42,168,42,"RecordingOptionsPresets"],[211,85,168,65],[211,86,168,66,"LOW_QUALITY"],[211,97,168,77],[211,99,168,79,"onRecordingStatusUpdate"],[211,122,168,102],[211,125,168,105],[211,129,168,109],[211,131,168,111,"progressUpdateIntervalMillis"],[211,159,168,139],[211,162,168,142],[211,166,168,146],[211,171,168,151],[212,6,169,8],[212,12,169,14,"recording"],[212,21,169,23],[212,24,169,26],[212,28,169,30,"Recording"],[212,37,169,39],[212,38,169,40],[212,39,169,41],[213,6,170,8],[213,10,170,12,"progressUpdateIntervalMillis"],[213,38,170,40],[213,40,170,42],[214,8,171,12,"recording"],[214,17,171,21],[214,18,171,22,"_progressUpdateIntervalMillis"],[214,47,171,51],[214,50,171,54,"progressUpdateIntervalMillis"],[214,78,171,82],[215,6,172,8],[216,6,173,8,"recording"],[216,15,173,17],[216,16,173,18,"setOnRecordingStatusUpdate"],[216,42,173,44],[216,43,173,45,"onRecordingStatusUpdate"],[216,66,173,68],[216,67,173,69],[217,6,174,8],[217,12,174,14,"recording"],[217,21,174,23],[217,22,174,24,"prepareToRecordAsync"],[217,42,174,44],[217,43,174,45],[218,8,175,12],[218,11,175,15,"options"],[218,18,175,22],[219,8,176,12,"keepAudioActiveHint"],[219,27,176,31],[219,29,176,33],[220,6,177,8],[220,7,177,9],[220,8,177,10],[221,6,178,8],[221,10,178,12],[222,8,179,12],[222,14,179,18,"status"],[222,20,179,24],[222,23,179,27],[222,29,179,33,"recording"],[222,38,179,42],[222,39,179,43,"startAsync"],[222,49,179,53],[222,50,179,54],[222,51,179,55],[223,8,180,12],[223,15,180,19],[224,10,180,21,"recording"],[224,19,180,30],[225,10,180,32,"status"],[226,8,180,39],[226,9,180,40],[227,6,181,8],[227,7,181,9],[227,8,182,8],[227,15,182,15,"err"],[227,18,182,18],[227,20,182,20],[228,8,183,12,"recording"],[228,17,183,21],[228,18,183,22,"stopAndUnloadAsync"],[228,36,183,40],[228,37,183,41],[228,38,183,42],[228,39,183,43,"catch"],[228,44,183,48],[228,45,183,50,"_e"],[228,47,183,52],[228,51,183,57],[229,10,184,16],[230,10,185,16],[231,10,186,16],[232,8,186,16],[232,9,187,13],[232,10,187,14],[233,8,188,12],[233,14,188,18,"err"],[233,17,188,21],[234,6,189,8],[235,4,190,4],[235,5,190,5],[236,4,191,4],[237,4,192,4],[238,0,193,0],[239,0,194,0],[240,0,195,0],[241,4,196,4,"getStatusAsync"],[241,18,196,18],[241,21,196,21],[241,27,196,21,"getStatusAsync"],[241,28,196,21],[241,33,196,33],[242,6,197,8],[243,6,198,8],[243,10,198,12],[243,14,198,16],[243,15,198,17,"_canRecord"],[243,25,198,27],[243,27,198,29],[244,8,199,12],[244,15,199,19],[244,19,199,23],[244,20,199,24,"_performOperationAndHandleStatusAsync"],[244,57,199,61],[244,58,199,62],[244,64,199,68,"ExponentAV"],[244,83,199,78],[244,84,199,79,"getAudioRecordingStatus"],[244,107,199,102],[244,108,199,103],[244,109,199,104],[244,110,199,105],[245,6,200,8],[246,6,201,8],[246,12,201,14,"status"],[246,18,201,20],[246,21,201,23],[247,8,202,12,"canRecord"],[247,17,202,21],[247,19,202,23],[247,24,202,28],[248,8,203,12,"isRecording"],[248,19,203,23],[248,21,203,25],[248,26,203,30],[249,8,204,12,"isDoneRecording"],[249,23,204,27],[249,25,204,29],[249,29,204,33],[249,30,204,34,"_isDoneRecording"],[249,46,204,50],[250,8,205,12,"durationMillis"],[250,22,205,26],[250,24,205,28],[250,28,205,32],[250,29,205,33,"_finalDurationMillis"],[251,6,206,8],[251,7,206,9],[252,6,207,8],[252,10,207,12],[252,11,207,13,"_callOnRecordingStatusUpdateForNewStatus"],[252,51,207,53],[252,52,207,54,"status"],[252,58,207,60],[252,59,207,61],[253,6,208,8],[253,13,208,15,"status"],[253,19,208,21],[254,4,209,4],[254,5,209,5],[255,4,210,4],[256,0,211,0],[257,0,212,0],[258,0,213,0],[259,0,214,0],[260,0,215,0],[261,0,216,0],[262,0,217,0],[263,0,218,0],[264,4,219,4,"setOnRecordingStatusUpdate"],[264,30,219,30,"setOnRecordingStatusUpdate"],[264,31,219,31,"onRecordingStatusUpdate"],[264,54,219,54],[264,56,219,56],[265,6,220,8],[265,10,220,12],[265,11,220,13,"_onRecordingStatusUpdate"],[265,35,220,37],[265,38,220,40,"onRecordingStatusUpdate"],[265,61,220,63],[266,6,221,8],[266,10,221,12,"onRecordingStatusUpdate"],[266,33,221,35],[266,37,221,39],[266,41,221,43],[266,43,221,45],[267,8,222,12],[267,12,222,16],[267,13,222,17,"_disablePolling"],[267,28,222,32],[267,29,222,33],[267,30,222,34],[268,6,223,8],[268,7,223,9],[268,13,224,13],[269,8,225,12],[269,12,225,16],[269,13,225,17,"_enablePollingIfNecessaryAndPossible"],[269,49,225,53],[269,50,225,54],[269,51,225,55],[270,6,226,8],[271,6,227,8],[271,10,227,12],[271,11,227,13,"getStatusAsync"],[271,25,227,27],[271,26,227,28],[271,27,227,29],[272,4,228,4],[273,4,229,4],[274,0,230,0],[275,0,231,0],[276,0,232,0],[277,0,233,0],[278,4,234,4,"setProgressUpdateInterval"],[278,29,234,29,"setProgressUpdateInterval"],[278,30,234,30,"progressUpdateIntervalMillis"],[278,58,234,58],[278,60,234,60],[279,6,235,8],[279,10,235,12],[279,11,235,13,"_progressUpdateIntervalMillis"],[279,40,235,42],[279,43,235,45,"progressUpdateIntervalMillis"],[279,71,235,73],[280,6,236,8],[280,10,236,12],[280,11,236,13,"getStatusAsync"],[280,25,236,27],[280,26,236,28],[280,27,236,29],[281,4,237,4],[282,4,238,4],[283,4,239,4],[284,0,240,0],[285,0,241,0],[286,0,242,0],[287,0,243,0],[288,0,244,0],[289,0,245,0],[290,0,246,0],[291,0,247,0],[292,0,248,0],[293,0,249,0],[294,4,250,4],[294,10,250,10,"prepareToRecordAsync"],[294,30,250,30,"prepareToRecordAsync"],[294,31,250,31,"options"],[294,38,250,38],[294,41,250,41,"RecordingOptionsPresets"],[294,84,250,64],[294,85,250,65,"LOW_QUALITY"],[294,96,250,76],[294,98,250,78],[295,6,251,8],[295,10,251,8,"throwIfAudioIsDisabled"],[295,51,251,30],[295,53,251,31],[295,54,251,32],[296,6,252,8],[296,10,252,12,"_recorderExists"],[296,25,252,27],[296,27,252,29],[297,8,253,12],[297,14,253,18],[297,18,253,22,"Error"],[297,23,253,27],[297,24,253,28],[297,84,253,88],[297,85,253,89],[298,6,254,8],[299,6,255,8],[299,10,255,12],[299,14,255,16],[299,15,255,17,"_isDoneRecording"],[299,31,255,33],[299,33,255,35],[300,8,256,12],[300,14,256,18],[300,18,256,22,"Error"],[300,23,256,27],[300,24,256,28],[300,91,256,95],[300,92,256,96],[301,6,257,8],[302,6,258,8],[302,10,258,12],[302,11,258,13,"options"],[302,18,258,20],[302,22,258,24],[302,23,258,25,"options"],[302,30,258,32],[302,31,258,33,"android"],[302,38,258,40],[302,42,258,44],[302,43,258,45,"options"],[302,50,258,52],[302,51,258,53,"ios"],[302,54,258,56],[302,56,258,58],[303,8,259,12],[303,14,259,18],[303,18,259,22,"Error"],[303,23,259,27],[303,24,259,28],[303,111,259,115],[303,112,259,116],[304,6,260,8],[305,6,261,8],[305,12,261,14,"extensionRegex"],[305,26,261,28],[305,29,261,31],[305,38,261,40],[306,6,262,8],[306,10,262,12],[306,11,262,13,"options"],[306,18,262,20],[306,19,262,21,"android"],[306,26,262,28],[306,27,262,29,"extension"],[306,36,262,38],[306,40,263,12],[306,41,263,13,"options"],[306,48,263,20],[306,49,263,21,"ios"],[306,52,263,24],[306,53,263,25,"extension"],[306,62,263,34],[306,66,264,12],[306,67,264,13,"extensionRegex"],[306,81,264,27],[306,82,264,28,"test"],[306,86,264,32],[306,87,264,33,"options"],[306,94,264,40],[306,95,264,41,"android"],[306,102,264,48],[306,103,264,49,"extension"],[306,112,264,58],[306,113,264,59],[306,117,265,12],[306,118,265,13,"extensionRegex"],[306,132,265,27],[306,133,265,28,"test"],[306,137,265,32],[306,138,265,33,"options"],[306,145,265,40],[306,146,265,41,"ios"],[306,149,265,44],[306,150,265,45,"extension"],[306,159,265,54],[306,160,265,55],[306,162,265,57],[307,8,266,12],[307,14,266,18],[307,18,266,22,"Error"],[307,23,266,27],[307,24,266,28],[307,59,266,63,"extensionRegex"],[307,73,266,77],[307,74,266,78,"toString"],[307,82,266,86],[307,83,266,87],[307,84,266,88],[307,87,266,91],[307,88,266,92],[308,6,267,8],[309,6,268,8],[309,10,268,12],[309,11,268,13],[309,15,268,17],[309,16,268,18,"_canRecord"],[309,26,268,28],[309,28,268,30],[310,8,269,12],[310,12,269,16,"eventEmitter"],[310,24,269,28],[310,26,269,30],[311,10,270,16],[311,14,270,20],[311,15,270,21,"_subscription"],[311,28,270,34],[311,31,270,37,"eventEmitter"],[311,43,270,49],[311,44,270,50,"addListener"],[311,55,270,61],[311,56,270,62],[311,89,270,95],[311,91,270,97],[311,95,270,101],[311,96,270,102,"_cleanupForUnloadedRecorder"],[311,123,270,129],[311,124,270,130],[312,8,271,12],[313,8,272,12],[313,14,272,18],[314,10,272,20,"uri"],[314,13,272,23],[315,10,272,25,"status"],[316,8,272,33],[316,9,272,34],[316,12,272,37],[316,18,272,43,"ExponentAV"],[316,37,272,53],[316,38,272,54,"prepareAudioRecorder"],[316,58,272,74],[316,59,272,75,"options"],[316,66,272,82],[316,67,272,83],[317,8,273,12,"_recorderExists"],[317,23,273,27],[317,26,273,30],[317,30,273,34],[318,8,274,12],[318,12,274,16],[318,13,274,17,"_uri"],[318,17,274,21],[318,20,274,24,"uri"],[318,23,274,27],[319,8,275,12],[319,12,275,16],[319,13,275,17,"_options"],[319,21,275,25],[319,24,275,28,"options"],[319,31,275,35],[320,8,276,12],[320,12,276,16],[320,13,276,17,"_canRecord"],[320,23,276,27],[320,26,276,30],[320,30,276,34],[321,8,277,12],[321,14,277,18,"currentStatus"],[321,27,277,31],[321,30,277,34],[322,10,277,36],[322,13,277,39,"status"],[322,19,277,45],[323,10,277,47,"canRecord"],[323,19,277,56],[323,21,277,58],[324,8,277,63],[324,9,277,64],[325,8,278,12],[325,12,278,16],[325,13,278,17,"_callOnRecordingStatusUpdateForNewStatus"],[325,53,278,57],[325,54,278,58,"currentStatus"],[325,67,278,71],[325,68,278,72],[326,8,279,12],[326,12,279,16],[326,13,279,17,"_enablePollingIfNecessaryAndPossible"],[326,49,279,53],[326,50,279,54],[326,51,279,55],[327,8,280,12],[327,15,280,19,"currentStatus"],[327,28,280,32],[328,6,281,8],[328,7,281,9],[328,13,282,13],[329,8,283,12],[329,14,283,18],[329,18,283,22,"Error"],[329,23,283,27],[329,24,283,28],[329,78,283,82],[329,79,283,83],[330,6,284,8],[331,4,285,4],[332,4,286,4],[333,0,287,0],[334,0,288,0],[335,0,289,0],[336,4,290,4],[336,10,290,10,"getAvailableInputs"],[336,28,290,28,"getAvailableInputs"],[336,29,290,28],[336,31,290,31],[337,6,291,8],[337,13,291,15,"ExponentAV"],[337,32,291,25],[337,33,291,26,"getAvailableInputs"],[337,51,291,44],[337,52,291,45],[337,53,291,46],[338,4,292,4],[339,4,293,4],[340,0,294,0],[341,0,295,0],[342,0,296,0],[343,4,297,4],[343,10,297,10,"getCurrentInput"],[343,25,297,25,"getCurrentInput"],[343,26,297,25],[343,28,297,28],[344,6,298,8],[344,13,298,15,"ExponentAV"],[344,32,298,25],[344,33,298,26,"getCurrentInput"],[344,48,298,41],[344,49,298,42],[344,50,298,43],[345,4,299,4],[346,4,300,4],[347,0,301,0],[348,0,302,0],[349,0,303,0],[350,0,304,0],[351,4,305,4],[351,10,305,10,"setInput"],[351,18,305,18,"setInput"],[351,19,305,19,"inputUid"],[351,27,305,27],[351,29,305,29],[352,6,306,8],[352,13,306,15,"ExponentAV"],[352,32,306,25],[352,33,306,26,"setInput"],[352,41,306,34],[352,42,306,35,"inputUid"],[352,50,306,43],[352,51,306,44],[353,4,307,4],[354,4,308,4],[355,0,309,0],[356,0,310,0],[357,0,311,0],[358,0,312,0],[359,4,313,4],[359,10,313,10,"startAsync"],[359,20,313,20,"startAsync"],[359,21,313,20],[359,23,313,23],[360,6,314,8],[360,13,314,15],[360,17,314,19],[360,18,314,20,"_performOperationAndHandleStatusAsync"],[360,55,314,57],[360,56,314,58],[360,62,314,64,"ExponentAV"],[360,81,314,74],[360,82,314,75,"startAudioRecording"],[360,101,314,94],[360,102,314,95],[360,103,314,96],[360,104,314,97],[361,4,315,4],[362,4,316,4],[363,0,317,0],[364,0,318,0],[365,0,319,0],[366,0,320,0],[367,0,321,0],[368,0,322,0],[369,0,323,0],[370,0,324,0],[371,4,325,4],[371,10,325,10,"pauseAsync"],[371,20,325,20,"pauseAsync"],[371,21,325,20],[371,23,325,23],[372,6,326,8],[372,13,326,15],[372,17,326,19],[372,18,326,20,"_performOperationAndHandleStatusAsync"],[372,55,326,57],[372,56,326,58],[372,62,326,64,"ExponentAV"],[372,81,326,74],[372,82,326,75,"pauseAudioRecording"],[372,101,326,94],[372,102,326,95],[372,103,326,96],[372,104,326,97],[373,4,327,4],[374,4,328,4],[375,0,329,0],[376,0,330,0],[377,0,331,0],[378,0,332,0],[379,0,333,0],[380,0,334,0],[381,0,335,0],[382,0,336,0],[383,0,337,0],[384,0,338,0],[385,4,339,4],[385,10,339,10,"stopAndUnloadAsync"],[385,28,339,28,"stopAndUnloadAsync"],[385,29,339,28],[385,31,339,31],[386,6,340,8],[386,10,340,12],[386,11,340,13],[386,15,340,17],[386,16,340,18,"_canRecord"],[386,26,340,28],[386,28,340,30],[387,8,341,12],[387,12,341,16],[387,16,341,20],[387,17,341,21,"_isDoneRecording"],[387,33,341,37],[387,35,341,39],[388,10,342,16],[388,16,342,22],[388,20,342,26,"Error"],[388,25,342,31],[388,26,342,32],[388,85,342,91],[388,86,342,92],[389,8,343,12],[389,9,343,13],[389,15,344,17],[390,10,345,16],[390,16,345,22],[390,20,345,26,"Error"],[390,25,345,31],[390,26,345,32],[390,81,345,87],[390,82,345,88],[391,8,346,12],[392,6,347,8],[393,6,348,8],[394,6,349,8],[395,6,350,8],[395,10,350,12,"stopResult"],[395,20,350,22],[396,6,351,8],[396,10,351,12,"stopError"],[396,19,351,21],[397,6,352,8],[397,10,352,12],[398,8,353,12,"stopResult"],[398,18,353,22],[398,21,353,25],[398,27,353,31,"ExponentAV"],[398,46,353,41],[398,47,353,42,"stopAudioRecording"],[398,65,353,60],[398,66,353,61],[398,67,353,62],[399,6,354,8],[399,7,354,9],[399,8,355,8],[399,15,355,15,"err"],[399,18,355,18],[399,20,355,20],[400,8,356,12,"stopError"],[400,17,356,21],[400,20,356,24,"err"],[400,23,356,27],[401,6,357,8],[402,6,358,8],[403,6,359,8],[403,10,359,12,"Platform"],[403,35,359,20],[403,36,359,21,"OS"],[403,38,359,23],[403,43,359,28],[403,48,359,33],[403,52,359,37,"stopResult"],[403,62,359,47],[403,64,359,49,"uri"],[403,67,359,52],[403,72,359,57,"undefined"],[403,81,359,66],[403,83,359,68],[404,8,360,12],[404,12,360,16],[404,13,360,17,"_uri"],[404,17,360,21],[404,20,360,24,"stopResult"],[404,30,360,34],[404,31,360,35,"uri"],[404,34,360,38],[405,6,361,8],[406,6,362,8],[407,6,363,8],[407,12,363,14,"ExponentAV"],[407,31,363,24],[407,32,363,25,"unloadAudioRecorder"],[407,51,363,44],[407,52,363,45],[407,53,363,46],[408,6,364,8],[408,12,364,14,"status"],[408,18,364,20],[408,21,364,23],[408,27,364,29],[408,31,364,33],[408,32,364,34,"_cleanupForUnloadedRecorder"],[408,59,364,61],[408,60,364,62,"stopResult"],[408,70,364,72],[408,71,364,73],[409,6,365,8],[409,13,365,15,"stopError"],[409,22,365,24],[409,25,365,27,"Promise"],[409,32,365,34],[409,33,365,35,"reject"],[409,39,365,41],[409,40,365,42,"stopError"],[409,49,365,51],[409,50,365,52],[409,53,365,55,"status"],[409,59,365,61],[410,4,366,4],[411,4,367,4],[412,4,368,4],[413,0,369,0],[414,0,370,0],[415,0,371,0],[416,0,372,0],[417,0,373,0],[418,4,374,4,"getURI"],[418,10,374,10,"getURI"],[418,11,374,10],[418,13,374,13],[419,6,375,8],[419,13,375,15],[419,17,375,19],[419,18,375,20,"_uri"],[419,22,375,24],[420,4,376,4],[421,4,377,4],[422,0,378,0],[423,0,379,0],[424,4,380,4],[424,10,380,10,"createNewLoadedSound"],[424,30,380,30,"createNewLoadedSound"],[424,31,380,31,"initialStatus"],[424,44,380,44],[424,47,380,47],[424,48,380,48],[424,49,380,49],[424,51,380,51,"onPlaybackStatusUpdate"],[424,73,380,73],[424,76,380,76],[424,80,380,80],[424,82,380,82],[425,6,381,8,"console"],[425,13,381,15],[425,14,381,16,"warn"],[425,18,381,20],[425,19,381,21],[425,144,381,146],[425,145,381,147],[426,6,382,8],[426,13,382,15],[426,17,382,19],[426,18,382,20,"createNewLoadedSoundAsync"],[426,43,382,45],[426,44,382,46,"initialStatus"],[426,57,382,59],[426,59,382,61,"onPlaybackStatusUpdate"],[426,81,382,83],[426,82,382,84],[427,4,383,4],[428,4,384,4],[429,0,385,0],[430,0,386,0],[431,0,387,0],[432,0,388,0],[433,0,389,0],[434,0,390,0],[435,0,391,0],[436,0,392,0],[437,0,393,0],[438,0,394,0],[439,0,395,0],[440,4,396,4],[440,10,396,10,"createNewLoadedSoundAsync"],[440,35,396,35,"createNewLoadedSoundAsync"],[440,36,396,36,"initialStatus"],[440,49,396,49],[440,52,396,52],[440,53,396,53],[440,54,396,54],[440,56,396,56,"onPlaybackStatusUpdate"],[440,78,396,78],[440,81,396,81],[440,85,396,85],[440,87,396,87],[441,6,397,8],[441,10,397,12],[441,14,397,16],[441,15,397,17,"_uri"],[441,19,397,21],[441,23,397,25],[441,27,397,29],[441,31,397,33],[441,32,397,34],[441,36,397,38],[441,37,397,39,"_isDoneRecording"],[441,53,397,55],[441,55,397,57],[442,8,398,12],[442,14,398,18],[442,18,398,22,"Error"],[442,23,398,27],[442,24,398,28],[442,82,398,86],[442,83,398,87],[443,6,399,8],[444,6,400,8],[444,13,400,15,"Sound"],[444,25,400,20],[444,26,400,21,"createAsync"],[444,37,400,32],[444,38,400,33],[445,8,400,35,"uri"],[445,11,400,38],[445,13,400,40],[445,17,400,44],[445,18,400,45,"_uri"],[446,6,400,50],[446,7,400,51],[446,9,400,53,"initialStatus"],[446,22,400,66],[446,24,400,68,"onPlaybackStatusUpdate"],[446,46,400,90],[446,48,400,92],[446,53,400,97],[446,54,400,98],[447,4,401,4],[448,2,402,0],[449,2,402,1,"exports"],[449,9,402,1],[449,10,402,1,"Recording"],[449,19,402,1],[449,22,402,1,"Recording"],[449,31,402,1],[450,0,402,1],[450,3]],"functionMap":{"names":["<global>","getPermissionsAsync","requestPermissionsAsync","Recording","_cleanupForUnloadedRecorder","_pollingLoop","_disablePolling","_enablePollingIfNecessaryAndPossible","_callOnRecordingStatusUpdateForNewStatus","_performOperationAndHandleStatusAsync","createAsync","recording.stopAndUnloadAsync._catch$argument_0","getStatusAsync","_performOperationAndHandleStatusAsync$argument_0","setOnRecordingStatusUpdate","setProgressUpdateInterval","prepareToRecordAsync","getAvailableInputs","getCurrentInput","setInput","startAsync","pauseAsync","stopAndUnloadAsync","getURI","createNewLoadedSound","createNewLoadedSoundAsync"],"mappings":"AAA;OCc;CDE;OEO;CFE;OG4C;kCCW;KDW;mBEC;KFU;IGC;KHK;IIC;KJK;IKC;KLI;IMC;KNU;yBOqC;iDCe;aDI;KPG;qBSM;8DCG,0CD;KTU;IWU;KXS;IYM;KZG;Iaa;KbmC;IcK;KdE;IeK;KfE;IgBM;KhBE;IiBM;0DPC,sCO;KjBC;IkBU;0DRC,sCQ;KlBC;ImBY;KnB2B;IoBQ;KpBE;IqBI;KrBG;IsBa;KtBK;CHC"}},"type":"js/module"}]}